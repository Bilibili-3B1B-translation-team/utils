[Script Info]
; Script generated by Aegisub 3.3.3
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.709
PlayResX: 1920
PlayResY: 1200

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,48,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: ENG,Inter Medium,50,&H00FFFFFF,&H00000000,&H00000000,&H00000000,-1,0,0,0,94,100,0,0,1,3,3,2,15,15,20,1
Style: CHN,MonyharOS Sans SC Medium,66,&H00FFFFFF,&H0055060A,&H0055060A,&H00000000,-1,0,0,0,98,100,0,0,1,4.5,3,2,15,15,75,1
Style: Staff,MonyharOS Sans SC Medium,50,&H00FFFFFF,&H0055060A,&H00AE9B5F,&H00000000,0,0,0,0,100,100,0,0,1,3,3,8,10,10,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:01:55.15,0:01:58.64,Staff,,0,0,0,,{\fad(1500,0)}{\an8\fs56\3c&H1063A4&}翻译   {\3c&H00AE9B5F&}saniac  清都山水郎  线头 \N\N{\3c&H1063A4&}校对   {\3c&H00AE9B5F&}ksyx  䶭  蛋卷    {\3c&H1063A4&}时间轴   {\3c&HAE9B5F&}䶭    {\3c&H1063A4&}后期   {\3c&HAE9B5F&}鹤翔万里
Dialogue: 0,0:00:00.00,0:00:02.80,ENG,,0,0,0,,Suppose I give you two different lists of numbers
Dialogue: 0,0:00:00.00,0:00:02.80,CHN,,0,0,0,,假设有两个不同的数组
Dialogue: 0,0:00:02.80,0:00:04.65,ENG,,0,0,0,,or maybe two different functions
Dialogue: 0,0:00:02.80,0:00:04.65,CHN,,0,0,0,,或两个不同的函数
Dialogue: 0,0:00:04.65,0:00:06.08,ENG,,0,0,0,,and I ask you to think of all the ways
Dialogue: 0,0:00:04.65,0:00:06.08,CHN,,0,0,0,,让你想出各种运算方式
Dialogue: 0,0:00:06.08,0:00:09.24,ENG,,0,0,0,,you might combine those two lists to get a new list of numbers
Dialogue: 0,0:00:06.08,0:00:09.24,CHN,,0,0,0,,来把两个数组组合在一起  得到新数组
Dialogue: 0,0:00:09.24,0:00:11.99,ENG,,0,0,0,,or combine the two functions to get a new function.
Dialogue: 0,0:00:09.24,0:00:11.99,CHN,,0,0,0,,或者把两个函数组合起来  得到新函数
Dialogue: 0,0:00:11.99,0:00:14.05,ENG,,0,0,0,,Maybe one simple way that comes to mind
Dialogue: 0,0:00:11.99,0:00:14.05,CHN,,0,0,0,,最简单的方法可能就是
Dialogue: 0,0:00:14.05,0:00:17.12,ENG,,0,0,0,,is to simply add them together term by term.
Dialogue: 0,0:00:14.05,0:00:17.12,CHN,,0,0,0,,一个个地把他们加起来
Dialogue: 0,0:00:17.12,0:00:20.25,ENG,,0,0,0,,Likewise, with the functions, you can add all the corresponding outputs.
Dialogue: 0,0:00:17.12,0:00:20.25,CHN,,0,0,0,,同样  对函数来说则是把结果对应相加
Dialogue: 0,0:00:20.56,0:00:24.08,ENG,,0,0,0,,In a similar vein, you could also multiply the two lists term by term
Dialogue: 0,0:00:20.56,0:00:24.08,CHN,,0,0,0,,类似的  你也可以把两个数组中的数逐个相乘
Dialogue: 0,0:00:24.08,0:00:25.86,ENG,,0,0,0,,and do the same thing with the functions.
Dialogue: 0,0:00:24.08,0:00:25.86,CHN,,0,0,0,,对函数也是如此
Dialogue: 0,0:00:26.37,0:00:28.23,ENG,,0,0,0,,But there's another kind of combination
Dialogue: 0,0:00:26.37,0:00:28.23,CHN,,0,0,0,,但有其实另一种组合方式
Dialogue: 0,0:00:28.23,0:00:32.44,ENG,,0,0,0,,just as fundamental as both of those but a lot less commonly discussed
Dialogue: 0,0:00:28.23,0:00:32.44,CHN,,0,0,0,,和之前提过的方式一样基础  但讨论得不多
Dialogue: 0,0:00:32.44,0:00:34.01,ENG,,0,0,0,,known as a Convolution.
Dialogue: 0,0:00:32.44,0:00:34.01,CHN,,0,0,0,,它被称作“卷积”
Dialogue: 0,0:00:34.01,0:00:36.93,ENG,,0,0,0,,But unlike the previous two cases, it's not something that's
Dialogue: 0,0:00:34.01,0:00:36.93,CHN,,0,0,0,,但和前面两种组合方式不同的是
Dialogue: 0,0:00:36.93,0:00:40.22,ENG,,0,0,0,,merely inherited from an operation you can do to numbers.
Dialogue: 0,0:00:36.93,0:00:40.22,CHN,,0,0,0,,它并非来源于某种数字运算
Dialogue: 0,0:00:40.22,0:00:45.01,ENG,,0,0,0,,It's something genuinely new for the context of list of numbers or combining functions.
Dialogue: 0,0:00:40.22,0:00:45.01,CHN,,0,0,0,,而是一种用来组合数组和函数的新方法
Dialogue: 0,0:00:45.41,0:00:49.18,ENG,,0,0,0,,They show up all over the place, they are ubiquitous in image processing.
Dialogue: 0,0:00:45.41,0:00:49.18,CHN,,0,0,0,,这一方法随处可见  在数字图像处理中尤为明显
Dialogue: 0,0:00:49.18,0:00:52.18,ENG,,0,0,0,,It's a core construct in the theory of probability,
Dialogue: 0,0:00:49.18,0:00:52.18,CHN,,0,0,0,,它是概率论中的一个核心结构
Dialogue: 0,0:00:52.18,0:00:54.68,ENG,,0,0,0,,they're used a lot in solving differential equations
Dialogue: 0,0:00:52.18,0:00:54.68,CHN,,0,0,0,,在求解微分方程时被大量使用
Dialogue: 0,0:00:54.68,0:00:56.83,ENG,,0,0,0,,and one context where you've almost certainly seen it
Dialogue: 0,0:00:54.68,0:00:56.83,CHN,,0,0,0,,而在多项式相乘的情形中  你一定见过它
Dialogue: 0,0:00:56.83,0:01:00.30,ENG,,0,0,0,,if not by this name is multiplying two polynomials together.
Dialogue: 0,0:00:56.83,0:01:00.30,CHN,,0,0,0,,只是可能不叫这个名字
Dialogue: 0,0:01:00.30,0:01:03.26,ENG,,0,0,0,,As someone in the business of visual explanations,
Dialogue: 0,0:01:00.30,0:01:03.26,CHN,,0,0,0,,对一个用可视化方式传播知识的人来说
Dialogue: 0,0:01:03.26,0:01:04.98,ENG,,0,0,0,,this is an especially great topic.
Dialogue: 0,0:01:03.26,0:01:04.98,CHN,,0,0,0,,这是一个非常好的选题
Dialogue: 0,0:01:04.98,0:01:08.81,ENG,,0,0,0,,Because the formulaic definition in isolation and without context
Dialogue: 0,0:01:04.98,0:01:08.81,CHN,,0,0,0,,因为光看没有上下文的公式化定义
Dialogue: 0,0:01:08.81,0:01:10.51,ENG,,0,0,0,,can look kind of intimidating.
Dialogue: 0,0:01:08.81,0:01:10.51,CHN,,0,0,0,,卷积是会有点唬人
Dialogue: 0,0:01:10.51,0:01:13.23,ENG,,0,0,0,,But if we take the time to really unpack what it's saying
Dialogue: 0,0:01:10.51,0:01:13.23,CHN,,0,0,0,,但是如果我告诉你卷积好处都有啥
Dialogue: 0,0:01:13.23,0:01:16.59,ENG,,0,0,0,,and before that, actually motivate why you would want something like this,
Dialogue: 0,0:01:13.23,0:01:16.59,CHN,,0,0,0,,再给你好好剖析下它的定义
Dialogue: 0,0:01:16.59,0:01:18.49,ENG,,0,0,0,,it's an incredibly beautiful operation.
Dialogue: 0,0:01:16.59,0:01:18.49,CHN,,0,0,0,,你就会发现这个运算十分美妙
Dialogue: 0,0:01:18.92,0:01:21.24,ENG,,0,0,0,,And I have to admit I actually learned a little something
Dialogue: 0,0:01:18.92,0:01:21.24,CHN,,0,0,0,,不得不承认  在制作这期视频的过程中
Dialogue: 0,0:01:21.24,0:01:23.93,ENG,,0,0,0,,while putting together the visuals for this project.
Dialogue: 0,0:01:21.24,0:01:23.93,CHN,,0,0,0,,我自己也切实地学到了一些知识
Dialogue: 0,0:01:23.93,0:01:26.23,ENG,,0,0,0,,In the case of convolving two different functions,
Dialogue: 0,0:01:23.93,0:01:26.23,CHN,,0,0,0,,在讲到对两个函数进行卷积的例子时
Dialogue: 0,0:01:26.23,0:01:29.39,ENG,,0,0,0,,I was trying to think of different ways you might picture what that mean.
Dialogue: 0,0:01:26.23,0:01:29.39,CHN,,0,0,0,,我在思考用不同的方式将其可视化
Dialogue: 0,0:01:29.39,0:01:32.17,ENG,,0,0,0,,And with one of them, I had a little bit of an aha moment for
Dialogue: 0,0:01:29.39,0:01:32.17,CHN,,0,0,0,,其中一个方式  让我豁然开朗
Dialogue: 0,0:01:32.17,0:01:36.63,ENG,,0,0,0,,why it is that normal distributions play the role that they do in probability;
Dialogue: 0,0:01:32.17,0:01:36.63,CHN,,0,0,0,,我一下子明白了  为何正态分布在概率论中如此重要
Dialogue: 0,0:01:36.63,0:01:38.96,ENG,,0,0,0,,why it's such a natural shape for a function.
Dialogue: 0,0:01:36.63,0:01:38.96,CHN,,0,0,0,,它的函数图像的形状为何如此自然
Dialogue: 0,0:01:38.96,0:01:41.82,ENG,,0,0,0,,But I'm getting ahead of myself, there's a lot of setup for that one.
Dialogue: 0,0:01:38.96,0:01:41.82,CHN,,0,0,0,,扯远了  在讲这个之前还有很多准备工作要做
Dialogue: 0,0:01:41.82,0:01:45.56,ENG,,0,0,0,,In this video, our primary focus is just going to be on the discrete case
Dialogue: 0,0:01:41.82,0:01:45.56,CHN,,0,0,0,,在这个视频中我们主要关注离散的卷积
Dialogue: 0,0:01:45.56,0:01:49.40,ENG,,0,0,0,,and in particular building up to a very unexpected but very clever algorithm
Dialogue: 0,0:01:45.56,0:01:49.40,ENG,,0,0,0,, 
Dialogue: 0,0:01:49.40,0:01:50.74,ENG,,0,0,0,,for computing these,
Dialogue: 0,0:01:45.56,0:01:50.74,CHN,,0,0,0,,逐步构建出一种让人拍案叫绝的计算方法
Dialogue: 0,0:01:50.74,0:01:54.50,ENG,,0,0,0,,and I'll pull out the discussion for the continuous case into a second part.
Dialogue: 0,0:01:50.74,0:01:54.50,CHN,,0,0,0,,而连续的卷积我们则放在下期视频里来讨论
Dialogue: 0,0:01:58.79,0:02:01.60,ENG,,0,0,0,,It's very tempting to open up with the image processing examples
Dialogue: 0,0:01:58.79,0:02:01.60,CHN,,0,0,0,,虽然用数字图像处理的例子作为开篇听起来很不错
Dialogue: 0,0:02:01.60,0:02:03.98,ENG,,0,0,0,,since they're visually the most intriguing
Dialogue: 0,0:02:01.60,0:02:03.98,CHN,,0,0,0,,毕竟它在可视方面是最能引起人兴趣的
Dialogue: 0,0:02:03.98,0:02:05.41,ENG,,0,0,0,,but there are couple bits of finickiness
Dialogue: 0,0:02:03.98,0:02:05.41,CHN,,0,0,0,,但在一些细微之处
Dialogue: 0,0:02:05.41,0:02:09.51,ENG,,0,0,0,,that make the image processing case less representative of convolutions overall.
Dialogue: 0,0:02:05.41,0:02:09.51,CHN,,0,0,0,,图像处理的例子不太能展现卷积的全貌
Dialogue: 0,0:02:09.51,0:02:11.93,ENG,,0,0,0,,So instead, let's kick things off with probability.
Dialogue: 0,0:02:09.51,0:02:11.93,CHN,,0,0,0,,所以我们还是从概率论开始吧
Dialogue: 0,0:02:11.93,0:02:13.96,ENG,,0,0,0,,And in particular, one of the simplest examples
Dialogue: 0,0:02:11.93,0:02:13.96,CHN,,0,0,0,,有这么一个最最简单的例子
Dialogue: 0,0:02:13.96,0:02:16.84,ENG,,0,0,0,,that I'm sure everyone hears thought about at some point in their life,
Dialogue: 0,0:02:13.96,0:02:16.84,CHN,,0,0,0,,相信各位观众或早或晚都曾听过
Dialogue: 0,0:02:16.84,0:02:18.54,ENG,,0,0,0,,which is rolling a pair of dice
Dialogue: 0,0:02:16.84,0:02:18.54,CHN,,0,0,0,,就是掷两枚骰子
Dialogue: 0,0:02:18.54,0:02:21.61,ENG,,0,0,0,,and figuring out the chances of seeing various different sums.
Dialogue: 0,0:02:18.54,0:02:21.61,CHN,,0,0,0,,计算两枚骰子的各个点数和的出现的概率
Dialogue: 0,0:02:22.35,0:02:24.61,ENG,,0,0,0,,And you might say not a problem. Not a problem.
Dialogue: 0,0:02:22.35,0:02:24.61,CHN,,0,0,0,,你可能会说  就这
Dialogue: 0,0:02:24.61,0:02:27.44,ENG,,0,0,0,,Each of your two dice has six different possible outcomes,
Dialogue: 0,0:02:24.61,0:02:27.44,CHN,,0,0,0,,每个骰子都有 6 种不同的结果
Dialogue: 0,0:02:27.44,0:02:31.77,ENG,,0,0,0,,which gives us a total of 36 distinct possible pairs of outcomes.
Dialogue: 0,0:02:27.44,0:02:31.77,CHN,,0,0,0,,总共就是六六三十六种配对可能
Dialogue: 0,0:02:31.77,0:02:33.17,ENG,,0,0,0,,And if we just look through them all,
Dialogue: 0,0:02:31.77,0:02:33.17,CHN,,0,0,0,,我们一个个数一遍
Dialogue: 0,0:02:33.17,0:02:36.31,ENG,,0,0,0,,we can count up how many pairs have a given sum.
Dialogue: 0,0:02:33.17,0:02:36.31,CHN,,0,0,0,,就可以数出每个和有多少种组合
Dialogue: 0,0:02:36.31,0:02:38.93,ENG,,0,0,0,,And arranging all the pairs in a grid like this,
Dialogue: 0,0:02:36.31,0:02:38.93,CHN,,0,0,0,,把所有的组合这样填在表格里
Dialogue: 0,0:02:38.93,0:02:40.49,ENG,,0,0,0,,one pretty nice thing is that
Dialogue: 0,0:02:38.93,0:02:40.49,CHN,,0,0,0,,有个很妙的事情是
Dialogue: 0,0:02:40.49,0:02:42.98,ENG,,0,0,0,,all of the pairs that have a constant sum
Dialogue: 0,0:02:40.49,0:02:42.98,CHN,,0,0,0,,相同点数和的组合
Dialogue: 0,0:02:42.98,0:02:45.93,ENG,,0,0,0,,are visible along one of these different diagonals.
Dialogue: 0,0:02:42.98,0:02:45.93,CHN,,0,0,0,,都排在同一条对角线上
Dialogue: 0,0:02:45.93,0:02:49.16,ENG,,0,0,0,,So simply counting how many exist on each of those diagonals
Dialogue: 0,0:02:45.93,0:02:49.16,CHN,,0,0,0,,所以只要数出对角线上面有多少个组合
Dialogue: 0,0:02:49.16,0:02:52.25,ENG,,0,0,0,,will tell you how likely you are to see a particular sum.
Dialogue: 0,0:02:49.16,0:02:52.25,CHN,,0,0,0,,就可以知道  出现某个点数和的概率是多少
Dialogue: 0,0:02:53.10,0:02:55.04,ENG,,0,0,0,,And I'd say, very good, very good.
Dialogue: 0,0:02:53.10,0:02:55.04,CHN,,0,0,0,,我会说：还不赖
Dialogue: 0,0:02:55.04,0:02:56.77,ENG,,0,0,0,,But can you think of any other ways
Dialogue: 0,0:02:55.04,0:02:56.77,ENG,,0,0,0,, 
Dialogue: 0,0:02:56.77,0:02:59.24,ENG,,0,0,0,,that you might visualize the same question?
Dialogue: 0,0:02:55.04,0:02:59.24,CHN,,0,0,0,,但你能换一种方式展现这个问题吗
Dialogue: 0,0:02:59.24,0:03:01.25,ENG,,0,0,0,,Other images that can come to mind,
Dialogue: 0,0:02:59.24,0:03:01.25,CHN,,0,0,0,,有没有想到其它
Dialogue: 0,0:03:01.25,0:03:04.24,ENG,,0,0,0,,to think of all the distinct pairs that have a given sum?
Dialogue: 0,0:03:01.25,0:03:04.24,CHN,,0,0,0,,数出某个加和的所有点数组合方式的画面
Dialogue: 0,0:03:04.85,0:03:08.20,ENG,,0,0,0,,And maybe one of you raises your hand and says, 'Yeah, I've got one.'
Dialogue: 0,0:03:04.85,0:03:08.20,CHN,,0,0,0,,可能有聪明的观众想说「我有想法了」
Dialogue: 0,0:03:08.20,0:03:11.80,ENG,,0,0,0,,Let's say you picture these two different sets of possibilities each in a row,
Dialogue: 0,0:03:08.20,0:03:11.80,CHN,,0,0,0,,把两枚骰子的所有可能结果  分别放到一行
Dialogue: 0,0:03:11.80,0:03:14.20,ENG,,0,0,0,,but you flip around that second row.
Dialogue: 0,0:03:11.80,0:03:14.20,CHN,,0,0,0,,然后把第二行翻转
Dialogue: 0,0:03:14.20,0:03:17.12,ENG,,0,0,0,,That way, all of the different pairs which add up to seven
Dialogue: 0,0:03:14.20,0:03:17.12,CHN,,0,0,0,,这样所有点数和为 7 的组合
Dialogue: 0,0:03:17.12,0:03:18.60,ENG,,0,0,0,,line up vertically like this...
Dialogue: 0,0:03:17.12,0:03:18.60,CHN,,0,0,0,,就会这样纵向对齐
Dialogue: 0,0:03:19.41,0:03:21.96,ENG,,0,0,0,,And if we slide that bottom row all the way to the right,
Dialogue: 0,0:03:19.41,0:03:21.96,CHN,,0,0,0,,如果我们把下面这行往左滑到头
Dialogue: 0,0:03:21.96,0:03:25.00,ENG,,0,0,0,,then the unique pair that adds up to two, the snake eyes,
Dialogue: 0,0:03:21.96,0:03:25.00,CHN,,0,0,0,,那么  加和为2的唯一一组结果
Dialogue: 0,0:03:25.00,0:03:26.67,ENG,,0,0,0,,are the only ones that align.
Dialogue: 0,0:03:25.00,0:03:26.67,CHN,,0,0,0,,就是唯一对齐的情况了
Dialogue: 0,0:03:26.67,0:03:29.23,ENG,,0,0,0,,And if I shlunk that over one unit to the right,
Dialogue: 0,0:03:26.67,0:03:29.23,CHN,,0,0,0,,如果我在往右推一个单位
Dialogue: 0,0:03:29.23,0:03:32.30,ENG,,0,0,0,,the pairs which align are the two different pairs that add up to three.
Dialogue: 0,0:03:29.23,0:03:32.30,CHN,,0,0,0,,就会出现两对和为 3 的组合
Dialogue: 0,0:03:32.90,0:03:36.59,ENG,,0,0,0,,And in general, different offset values of this lower array,
Dialogue: 0,0:03:32.90,0:03:36.59,CHN,,0,0,0,,总的来说  红色数组的不同偏移量
Dialogue: 0,0:03:36.59,0:03:38.91,ENG,,0,0,0,,which remember, I had to flip around first,
Dialogue: 0,0:03:36.59,0:03:38.91,CHN,,0,0,0,,（别忘了下面这行是翻转过的）
Dialogue: 0,0:03:38.91,0:03:41.51,ENG,,0,0,0,,reveal all the distinct pairs that have a given sum.
Dialogue: 0,0:03:38.91,0:03:41.51,CHN,,0,0,0,,对应了两个骰子的点数加和
Dialogue: 0,0:03:45.08,0:03:48.89,ENG,,0,0,0,,As far as probability questions go, this still isn't especially interesting
Dialogue: 0,0:03:45.08,0:03:48.89,CHN,,0,0,0,,到目前为止  这个概率问题还不算太有趣
Dialogue: 0,0:03:48.89,0:03:50.44,ENG,,0,0,0,,because all we're doing is counting
Dialogue: 0,0:03:48.89,0:03:50.44,CHN,,0,0,0,,因为我们只是数出了
Dialogue: 0,0:03:50.44,0:03:53.24,ENG,,0,0,0,,how many outcomes there are in each of these categories.
Dialogue: 0,0:03:50.44,0:03:53.24,CHN,,0,0,0,,每种点数和有多少种组合方式
Dialogue: 0,0:03:53.24,0:03:55.42,ENG,,0,0,0,,But that is with the implicit assumption that
Dialogue: 0,0:03:53.24,0:03:55.42,CHN,,0,0,0,,但这里面其实隐藏了一个假设
Dialogue: 0,0:03:55.42,0:03:58.12,ENG,,0,0,0,,there's an equal chance for each of these faces to come up.
Dialogue: 0,0:03:55.42,0:03:58.12,CHN,,0,0,0,,就是骰子的每面向上的概率是相同的
Dialogue: 0,0:03:58.47,0:04:02.10,ENG,,0,0,0,,But what if I told you I have a special set of dice that's not uniform.
Dialogue: 0,0:03:58.47,0:04:02.10,CHN,,0,0,0,,如果我现在改用非标的骰子
Dialogue: 0,0:04:02.10,0:04:04.33,ENG,,0,0,0,,Maybe the blue die has its own set of numbers
Dialogue: 0,0:04:02.10,0:04:04.33,ENG,,0,0,0,, 
Dialogue: 0,0:04:04.33,0:04:06.93,ENG,,0,0,0,,describing the probabilities for each face coming up
Dialogue: 0,0:04:02.10,0:04:06.93,CHN,,0,0,0,,用一个数组来描述蓝骰子每面向上的概率
Dialogue: 0,0:04:06.93,0:04:09.95,ENG,,0,0,0,,and the red die has its own unique distinct set of numbers.
Dialogue: 0,0:04:06.93,0:04:09.95,CHN,,0,0,0,,同样地  红骰子也有这样一个数组
Dialogue: 0,0:04:10.45,0:04:14.37,ENG,,0,0,0,,In that case if you wanted to figure out, say, the probability of seeing a two,
Dialogue: 0,0:04:10.45,0:04:14.37,CHN,,0,0,0,,这样如果你想算出和为 2 的出现概率
Dialogue: 0,0:04:14.37,0:04:17.49,ENG,,0,0,0,,you would multiply the probability that the blue die is a one,
Dialogue: 0,0:04:14.37,0:04:17.49,CHN,,0,0,0,,就要用蓝骰子出现 1 的概率
Dialogue: 0,0:04:17.49,0:04:20.21,ENG,,0,0,0,,times the probability that the red die is a one.
Dialogue: 0,0:04:17.49,0:04:20.21,CHN,,0,0,0,,乘红骰子出现 1 的概率
Dialogue: 0,0:04:20.21,0:04:22.16,ENG,,0,0,0,,And for the chances of seeing a three,
Dialogue: 0,0:04:20.21,0:04:22.16,CHN,,0,0,0,,如果要计算和为 3 的概率
Dialogue: 0,0:04:22.16,0:04:24.96,ENG,,0,0,0,,you look at the two distinct pairs where that's possible
Dialogue: 0,0:04:22.16,0:04:24.96,CHN,,0,0,0,,则需要把对应组合里
Dialogue: 0,0:04:24.96,0:04:27.95,ENG,,0,0,0,,and again multiply the corresponding probabilities
Dialogue: 0,0:04:24.96,0:04:27.95,CHN,,0,0,0,,点数出现的概率分别相乘
Dialogue: 0,0:04:27.95,0:04:30.06,ENG,,0,0,0,,and then add those two products together.
Dialogue: 0,0:04:27.95,0:04:30.06,CHN,,0,0,0,,然后再把乘积相加
Dialogue: 0,0:04:30.06,0:04:32.36,ENG,,0,0,0,,Similarly, the chances of seeing a four
Dialogue: 0,0:04:30.06,0:04:32.36,CHN,,0,0,0,,类似地  要计算和为 4 的情况
Dialogue: 0,0:04:32.36,0:04:35.66,ENG,,0,0,0,,involves multiplying together three different pairs of possibilities
Dialogue: 0,0:04:32.36,0:04:35.66,CHN,,0,0,0,,就要把三个不同组合里点数的出现概率相乘
Dialogue: 0,0:04:35.66,0:04:37.16,ENG,,0,0,0,,and adding them all together.
Dialogue: 0,0:04:35.66,0:04:37.16,CHN,,0,0,0,,再把他们相加
Dialogue: 0,0:04:37.16,0:04:39.20,ENG,,0,0,0,,And in the spirit of setting up some formulas,
Dialogue: 0,0:04:37.16,0:04:39.20,CHN,,0,0,0,,秉着要把它公式化的精神
Dialogue: 0,0:04:39.20,0:04:42.99,ENG,,0,0,0,,let's name these top probabilities "a₁, a₂, a₃" and so on
Dialogue: 0,0:04:39.20,0:04:42.99,CHN,,0,0,0,,我们把上面那行的概率记为 a₁ a₂ a₃...
Dialogue: 0,0:04:42.99,0:04:46.00,ENG,,0,0,0,,and name the bottom ones "b₁, b₂, b₃" and so on.
Dialogue: 0,0:04:42.99,0:04:46.00,CHN,,0,0,0,,把下面一行的概率记为 b₁ b₂ b₃...
Dialogue: 0,0:04:46.42,0:04:50.62,ENG,,0,0,0,,And in general, this process where we are taking two different arrays of numbers,
Dialogue: 0,0:04:46.42,0:04:50.62,CHN,,0,0,0,,拿出两列不同的数组{\fsp-29}、
Dialogue: 0,0:04:50.62,0:04:52.21,ENG,,0,0,0,,flipping the second one around
Dialogue: 0,0:04:50.62,0:04:52.21,CHN,,0,0,0,,把第二组翻转过来{\fsp-29}、
Dialogue: 0,0:04:52.21,0:04:55.14,ENG,,0,0,0,,and then lining them up at various different off set values,
Dialogue: 0,0:04:52.21,0:04:55.14,CHN,,0,0,0,,然后用不同偏移值把它们对齐{\fsp-29}、
Dialogue: 0,0:04:55.14,0:04:57.86,ENG,,0,0,0,,taking a bunch of pairwise products and adding them up,
Dialogue: 0,0:04:55.14,0:04:57.86,CHN,,0,0,0,,得到一组乘积之后再把他们加起来
Dialogue: 0,0:04:57.86,0:05:01.60,ENG,,0,0,0,,that's one of the fundamental ways to think about what a convolution is.
Dialogue: 0,0:04:57.86,0:05:01.60,CHN,,0,0,0,,这整个过程  便是卷积最基本的思考方式
Dialogue: 0,0:05:05.15,0:05:07.42,ENG,,0,0,0,,So, just to spell it out a little more exactly-
Dialogue: 0,0:05:05.15,0:05:07.42,CHN,,0,0,0,,说得更精确一些
Dialogue: 0,0:05:07.42,0:05:09.08,ENG,,0,0,0,,through this process, we just generated
Dialogue: 0,0:05:07.42,0:05:09.08,CHN,,0,0,0,,我们通过这个过程
Dialogue: 0,0:05:09.08,0:05:12.42,ENG,,0,0,0,,probabilities for seeing two, three, four, on and on up to 12.
Dialogue: 0,0:05:09.08,0:05:12.42,CHN,,0,0,0,,生成了点数和为 2 3 4 ... 12 的概率
Dialogue: 0,0:05:12.42,0:05:15.43,ENG,,0,0,0,,And we got them by mixing together one list of values, A
Dialogue: 0,0:05:12.42,0:05:15.43,ENG,,0,0,0,, 
Dialogue: 0,0:05:15.43,0:05:17.43,ENG,,0,0,0,,and another list of values, B.
Dialogue: 0,0:05:12.42,0:05:17.43,CHN,,0,0,0,,这个过程通过某种运算将 A 和 B 数组的值交汇
Dialogue: 0,0:05:17.43,0:05:18.63,ENG,,0,0,0,,In the lingo, we'd say
Dialogue: 0,0:05:17.43,0:05:18.63,CHN,,0,0,0,,说得专业一点就是
Dialogue: 0,0:05:18.63,0:05:23.06,ENG,,0,0,0,,the convolution of those two sequences gives us this new sequence;
Dialogue: 0,0:05:18.63,0:05:23.06,CHN,,0,0,0,,两组数的卷积生成了新的这组数
Dialogue: 0,0:05:23.06,0:05:24.73,ENG,,0,0,0,,the new sequence of 11 values,
Dialogue: 0,0:05:23.06,0:05:24.73,CHN,,0,0,0,,新的数列包含 11 个值
Dialogue: 0,0:05:24.73,0:05:27.76,ENG,,0,0,0,,each of which looks like some sum of pairwise products.
Dialogue: 0,0:05:24.73,0:05:27.76,CHN,,0,0,0,,每个值都是两数组中若干数对之积的加和
Dialogue: 0,0:05:27.76,0:05:31.20,ENG,,0,0,0,,If you prefer, another way you could think about the same operation
Dialogue: 0,0:05:27.76,0:05:31.20,CHN,,0,0,0,,另一种思考卷积的方式是
Dialogue: 0,0:05:31.20,0:05:34.60,ENG,,0,0,0,,is to first create a table of all the pairwise products
Dialogue: 0,0:05:31.20,0:05:34.60,CHN,,0,0,0,,列一个表格  计算各个组合的乘积
Dialogue: 0,0:05:34.60,0:05:37.31,ENG,,0,0,0,,and then add up along all these diagonals.
Dialogue: 0,0:05:34.60,0:05:37.31,CHN,,0,0,0,,然后沿着各个对角线相加
Dialogue: 0,0:05:37.31,0:05:40.44,ENG,,0,0,0,,Again, that's a way of mixing together these two sequences of numbers
Dialogue: 0,0:05:37.31,0:05:40.44,CHN,,0,0,0,,就把两组数混合了起来
Dialogue: 0,0:05:40.44,0:05:43.12,ENG,,0,0,0,,to get us a new sequence of eleven numbers.
Dialogue: 0,0:05:40.44,0:05:43.12,CHN,,0,0,0,,得到了一组 11 个数
Dialogue: 0,0:05:43.12,0:05:45.35,ENG,,0,0,0,,It's the same operation as the sliding windows thought,
Dialogue: 0,0:05:43.12,0:05:45.35,CHN,,0,0,0,,这个做法和滑动数列类似
Dialogue: 0,0:05:45.35,0:05:47.13,ENG,,0,0,0,,just another perspective.
Dialogue: 0,0:05:45.35,0:05:47.13,CHN,,0,0,0,,只是换了一种思考方式
Dialogue: 0,0:05:47.13,0:05:50.13,ENG,,0,0,0,,Putting a little notation to it, here's how you might see it written down:
Dialogue: 0,0:05:47.13,0:05:50.13,CHN,,0,0,0,,用上一些符号就可以写成这样
Dialogue: 0,0:05:50.13,0:05:54.93,ENG,,0,0,0,,The convolution of A and B, denoted with this little asterisk, is a new list.
Dialogue: 0,0:05:50.13,0:05:54.93,CHN,,0,0,0,,A 和 B 的卷积的符号是「*」 其结果是一个列表
Dialogue: 0,0:05:54.93,0:05:58.05,ENG,,0,0,0,,And the nth element of that list looks like a sum
Dialogue: 0,0:05:54.93,0:05:58.05,CHN,,0,0,0,,它的第 n 项定义为
Dialogue: 0,0:05:58.42,0:06:02.30,ENG,,0,0,0,,and that sum goes over all different pairs of indices, i and j,
Dialogue: 0,0:05:58.42,0:06:02.30,ENG,,0,0,0,, 
Dialogue: 0,0:06:02.30,0:06:05.17,ENG,,0,0,0,,so that the sum of those indices is equal to N.
Dialogue: 0,0:05:58.42,0:06:05.17,CHN,,0,0,0,,把下标 i j 之和为 n 的诸元素的乘积累加起来
Dialogue: 0,0:06:05.17,0:06:06.38,ENG,,0,0,0,,It's kind of a mouthful
Dialogue: 0,0:06:05.17,0:06:06.38,CHN,,0,0,0,,这可能有点啰嗦
Dialogue: 0,0:06:06.38,0:06:08.72,ENG,,0,0,0,,but for example, if n was 6,
Dialogue: 0,0:06:06.38,0:06:08.72,CHN,,0,0,0,,但我还是要举个例子  如果 n=6
Dialogue: 0,0:06:08.72,0:06:14.18,ENG,,0,0,0,,the pairs we're going over are 1 and 5, 2 and 4, 3 and 3, 4 and 2, 5 and 1.
Dialogue: 0,0:06:08.72,0:06:14.18,CHN,,0,0,0,,i 和 j 的组合 (i, j) 就是 (1, 5) (2, 4) (3, 3) (4, 2) (5, 1)
Dialogue: 0,0:06:14.18,0:06:15.94,ENG,,0,0,0,,All the different pairs that add up to six.
Dialogue: 0,0:06:14.18,0:06:15.94,CHN,,0,0,0,,这些组合加起来都是 6
Dialogue: 0,0:06:16.58,0:06:19.44,ENG,,0,0,0,,But honestly, however you write it down, the notation is secondary
Dialogue: 0,0:06:16.58,0:06:19.44,CHN,,0,0,0,,但是老实说  不管你怎么写
Dialogue: 0,0:06:19.44,0:06:22.70,ENG,,0,0,0,,in importance to the visual you might hold in your head for the process.
Dialogue: 0,0:06:19.44,0:06:22.70,CHN,,0,0,0,,符号在脑中留下的印象都不会太深
Dialogue: 0,0:06:23.51,0:06:26.35,ENG,,0,0,0,,Here, maybe it helps to do a super simple example
Dialogue: 0,0:06:23.51,0:06:26.35,CHN,,0,0,0,,这有一个超简单的例子可能会有所帮助
Dialogue: 0,0:06:26.35,0:06:27.00,ENG,,0,0,0,,where I might ask you,
Dialogue: 0,0:06:26.35,0:06:27.00,CHN,,0,0,0,,我要问你
Dialogue: 0,0:06:27.00,0:06:31.00,ENG,,0,0,0,,what's the convolution of the list 1, 2, 3 with the list 4, 5, 6?
Dialogue: 0,0:06:27.00,0:06:31.00,CHN,,0,0,0,,数组 (1, 2, 3) 和 (4, 5, 6) 的卷积是什么
Dialogue: 0,0:06:31.43,0:06:35.38,ENG,,0,0,0,,You might picture taking both of these lists, flipping around that second one
Dialogue: 0,0:06:31.43,0:06:35.38,CHN,,0,0,0,,你就可以想象这两个数组并排放着  翻转第二个
Dialogue: 0,0:06:35.38,0:06:38.10,ENG,,0,0,0,,and then starting with its slid all the way over to the left.
Dialogue: 0,0:06:35.38,0:06:38.10,CHN,,0,0,0,,然后把它（尾部）滑到最左边
Dialogue: 0,0:06:38.10,0:06:40.72,ENG,,0,0,0,,Then the pair of values which align are one and four,
Dialogue: 0,0:06:38.10,0:06:40.72,CHN,,0,0,0,,这时候对齐的就只有 1 和 4
Dialogue: 0,0:06:40.72,0:06:44.00,ENG,,0,0,0,,multiply them together and that gives us our first term of our output.
Dialogue: 0,0:06:40.72,0:06:44.00,CHN,,0,0,0,,把它们乘在一起得到输出的第一项
Dialogue: 0,0:06:44.00,0:06:46.25,ENG,,0,0,0,,Slide that bottom array one unit to the right,
Dialogue: 0,0:06:44.00,0:06:46.25,CHN,,0,0,0,,把第二个数组往右滑一个单位
Dialogue: 0,0:06:46.25,0:06:49.33,ENG,,0,0,0,,the pairs which align are 1, 5, 2 and 4.
Dialogue: 0,0:06:46.25,0:06:49.33,CHN,,0,0,0,,对齐的就会有 1 和 5、2 和 4
Dialogue: 0,0:06:49.33,0:06:50.70,ENG,,0,0,0,,Multiply those pairs,
Dialogue: 0,0:06:49.33,0:06:50.70,CHN,,0,0,0,,把这两对相乘
Dialogue: 0,0:06:50.70,0:06:53.24,ENG,,0,0,0,,add them together and that gives us 13.
Dialogue: 0,0:06:50.70,0:06:53.24,ENG,,0,0,0,, 
Dialogue: 0,0:06:53.24,0:06:54.86,ENG,,0,0,0,,The next entry in our output.
Dialogue: 0,0:06:50.70,0:06:54.86,CHN,,0,0,0,,然后把乘积加在一起就得到了下一项 13
Dialogue: 0,0:06:54.86,0:07:00.04,ENG,,0,0,0,,Slide things over once more and we'll take 1×6+2×5+3×4
Dialogue: 0,0:06:54.86,0:07:00.04,CHN,,0,0,0,,再滑一下  就可以得到 1×6+2×5+3×4
Dialogue: 0,0:07:00.04,0:07:02.04,ENG,,0,0,0,,which happens to be 28.
Dialogue: 0,0:07:00.04,0:07:02.04,CHN,,0,0,0,,算出来就是 28
Dialogue: 0,0:07:02.04,0:07:07.48,ENG,,0,0,0,,One more slide and we get 2×6+3×5 and that gives us 27
Dialogue: 0,0:07:02.04,0:07:07.48,CHN,,0,0,0,,再滑一下  就得到了 2×6+3×5=27
Dialogue: 0,0:07:07.48,0:07:10.65,ENG,,0,0,0,,and finally the last term looks like 3×6.
Dialogue: 0,0:07:07.48,0:07:10.65,CHN,,0,0,0,,最后再滑一下就是 3×6
Dialogue: 0,0:07:10.65,0:07:13.96,ENG,,0,0,0,,If you'd like, you can pull up whatever your favorite programming languages
Dialogue: 0,0:07:10.65,0:07:13.96,CHN,,0,0,0,,你可以用自己最喜欢的编程语言
Dialogue: 0,0:07:13.96,0:07:17.17,ENG,,0,0,0,,and your favorite library that includes various numerical operations
Dialogue: 0,0:07:13.96,0:07:17.17,CHN,,0,0,0,,和数值计算库跑一下
Dialogue: 0,0:07:17.17,0:07:19.17,ENG,,0,0,0,,and you can confirm I'm not lying to you.
Dialogue: 0,0:07:17.17,0:07:19.17,CHN,,0,0,0,,就知道我没骗你了
Dialogue: 0,0:07:19.17,0:07:22.61,ENG,,0,0,0,,If you take the convolution of 1, 2, 3 against 4, 5, 6,
Dialogue: 0,0:07:19.17,0:07:22.61,CHN,,0,0,0,,如果计算 (1, 2, 3) 和 (4, 5, 6) 的卷积
Dialogue: 0,0:07:22.61,0:07:24.60,ENG,,0,0,0,,this is indeed the result that you'll get.
Dialogue: 0,0:07:22.61,0:07:24.60,CHN,,0,0,0,,你就会得到这个结果
Dialogue: 0,0:07:25.90,0:07:28.97,ENG,,0,0,0,,We've seen one case where this is a natural and desirable operation
Dialogue: 0,0:07:25.90,0:07:28.97,CHN,,0,0,0,,我们已经在求和得出概率分布的例子中
Dialogue: 0,0:07:28.97,0:07:31.34,ENG,,0,0,0,,adding up to probability distributions.
Dialogue: 0,0:07:28.97,0:07:31.34,CHN,,0,0,0,,看到了这个运算是多么的自然和美妙
Dialogue: 0,0:07:31.34,0:07:34.00,ENG,,0,0,0,,And another common example would be a moving average.
Dialogue: 0,0:07:31.34,0:07:34.00,CHN,,0,0,0,,而另一个常见例子是滑动平均
Dialogue: 0,0:07:34.00,0:07:36.56,ENG,,0,0,0,,Imagine you have some long list of numbers
Dialogue: 0,0:07:34.00,0:07:36.56,CHN,,0,0,0,,假设有一个长数组
Dialogue: 0,0:07:36.56,0:07:40.13,ENG,,0,0,0,,and you take another smaller list of numbers that all add up to one.
Dialogue: 0,0:07:36.56,0:07:40.13,CHN,,0,0,0,,和另一个所有数之和为 1 的短数组
Dialogue: 0,0:07:40.13,0:07:42.26,ENG,,0,0,0,,In this case, I just have a little list of five values
Dialogue: 0,0:07:40.13,0:07:42.26,CHN,,0,0,0,,这里就让短数组只有五个值好了
Dialogue: 0,0:07:42.26,0:07:44.20,ENG,,0,0,0,,and they're all equal to one fifth.
Dialogue: 0,0:07:42.26,0:07:44.20,CHN,,0,0,0,,且每个值都等于 1/5
Dialogue: 0,0:07:44.20,0:07:47.58,ENG,,0,0,0,,Then if we do this sliding window convolution process
Dialogue: 0,0:07:44.20,0:07:47.58,CHN,,0,0,0,,接下来  如果我们重复这个滑动窗口卷积的过程
Dialogue: 0,0:07:47.58,0:07:51.70,ENG,,0,0,0,,and kind of close our eyes and sweep under the rug what happens at the very beginning of it.
Dialogue: 0,0:07:47.58,0:07:51.70,CHN,,0,0,0,,（最开始窗口出界的问题你就当没看见）
Dialogue: 0,0:07:51.70,0:07:55.81,ENG,,0,0,0,,Once our smaller list of values entirely overlaps with the bigger one,
Dialogue: 0,0:07:51.70,0:07:55.81,CHN,,0,0,0,,当短数组和长数组完全重叠时
Dialogue: 0,0:07:55.81,0:07:58.90,ENG,,0,0,0,,think about what each term in this convolution really means.
Dialogue: 0,0:07:55.81,0:07:58.90,CHN,,0,0,0,,思考下卷积的每项代表着什么
Dialogue: 0,0:07:59.38,0:08:01.39,ENG,,0,0,0,,At each iteration, what you're doing is
Dialogue: 0,0:07:59.38,0:08:01.39,CHN,,0,0,0,,每次迭代的时候  你实际上是
Dialogue: 0,0:08:01.39,0:08:04.55,ENG,,0,0,0,,multiplying each of the values from your data by one fifth
Dialogue: 0,0:08:01.39,0:08:04.55,CHN,,0,0,0,,在把数据里的每个数乘上 1/5
Dialogue: 0,0:08:04.55,0:08:06.19,ENG,,0,0,0,,and adding them all together,
Dialogue: 0,0:08:04.55,0:08:06.19,CHN,,0,0,0,,然后将它们加起来
Dialogue: 0,0:08:06.19,0:08:07.17,ENG,,0,0,0,,which is to say
Dialogue: 0,0:08:06.19,0:08:07.17,CHN,,0,0,0,,也就是说
Dialogue: 0,0:08:07.17,0:08:10.69,ENG,,0,0,0,,you're taking an average of your data inside this little window.
Dialogue: 0,0:08:07.17,0:08:10.69,CHN,,0,0,0,,你在求这个小窗口里数据的平均值
Dialogue: 0,0:08:11.19,0:08:15.23,ENG,,0,0,0,,Overall, the process gives you a smooth out version of the original data.
Dialogue: 0,0:08:11.19,0:08:15.23,CHN,,0,0,0,,总的来说  这个过程给了你一个原数据的平滑版本
Dialogue: 0,0:08:15.23,0:08:18.56,ENG,,0,0,0,,And you could modify this starting with a different little list of numbers
Dialogue: 0,0:08:15.23,0:08:18.56,CHN,,0,0,0,,你可以修改它  使其从一个不同的短数组开始
Dialogue: 0,0:08:18.56,0:08:20.84,ENG,,0,0,0,,and as long as that little list all adds up to one,
Dialogue: 0,0:08:18.56,0:08:20.84,CHN,,0,0,0,,只要短数组之和还是 1
Dialogue: 0,0:08:20.84,0:08:23.30,ENG,,0,0,0,,you can still interpret it as a moving average.
Dialogue: 0,0:08:20.84,0:08:23.30,CHN,,0,0,0,,你就仍可以把它解释为滑动平均
Dialogue: 0,0:08:23.30,0:08:24.59,ENG,,0,0,0,,In the example shown here,
Dialogue: 0,0:08:23.30,0:08:24.59,CHN,,0,0,0,,在这个例子中
Dialogue: 0,0:08:24.59,0:08:27.90,ENG,,0,0,0,,that moving average would be giving more weight towards the central value.
Dialogue: 0,0:08:24.59,0:08:27.90,CHN,,0,0,0,,滑动平均会给中间值更大的权重
Dialogue: 0,0:08:28.39,0:08:30.94,ENG,,0,0,0,,This also results in a smooth out version of the data.
Dialogue: 0,0:08:28.39,0:08:30.94,CHN,,0,0,0,,其结果也是原数据的平滑版本
Dialogue: 0,0:08:33.33,0:08:36.03,ENG,,0,0,0,,If you do kind of a two dimensional analog of this,
Dialogue: 0,0:08:33.33,0:08:36.03,CHN,,0,0,0,,如果你在二维上进行类似的操作
Dialogue: 0,0:08:36.03,0:08:39.20,ENG,,0,0,0,,it gives you a fun algorithm for blurring a given image.
Dialogue: 0,0:08:36.03,0:08:39.20,CHN,,0,0,0,,就会得到一个把图片变模糊的有趣方法
Dialogue: 0,0:08:39.20,0:08:41.85,ENG,,0,0,0,,And I should say the animations I'm about to show
Dialogue: 0,0:08:39.20,0:08:41.85,CHN,,0,0,0,,我应该指出  我接下来将要展示的动画
Dialogue: 0,0:08:41.85,0:08:44.70,ENG,,0,0,0,,are modified from something I originally made for
Dialogue: 0,0:08:41.85,0:08:44.70,CHN,,0,0,0,,是由我和 Julia Lab 在麻省理工做的
Dialogue: 0,0:08:44.70,0:08:47.52,ENG,,0,0,0,,part of a set of lectures I did with the Julia Lab at MIT
Dialogue: 0,0:08:44.70,0:08:47.52,CHN,,0,0,0,,一系列公开课里的内容修改而来的
Dialogue: 0,0:08:47.52,0:08:51.36,ENG,,0,0,0,,for a certain open courseware class that included an image processing unit.
Dialogue: 0,0:08:47.52,0:08:51.36,CHN,,0,0,0,,其中就包含了一节图像处理相关的内容
Dialogue: 0,0:08:51.36,0:08:54.45,ENG,,0,0,0,,There we did a little bit more to dive into the code behind all of this.
Dialogue: 0,0:08:51.36,0:08:54.45,CHN,,0,0,0,,那个视频里对图像处理背后的代码讲解得更为深入
Dialogue: 0,0:08:54.45,0:08:56.50,ENG,,0,0,0,,So if you're curious, I'll leave you some links.
Dialogue: 0,0:08:54.45,0:08:56.50,CHN,,0,0,0,,你感兴趣的话  可以看看评论区的链接
Dialogue: 0,0:08:56.50,0:08:59.81,ENG,,0,0,0,,But focusing back on this blurring example. What's going on is
Dialogue: 0,0:08:56.50,0:08:59.81,CHN,,0,0,0,,讲回到模糊图片的这个例子上  我们在做的事是
Dialogue: 0,0:08:59.81,0:09:04.17,ENG,,0,0,0,,I've got this little 3×3 grid of values that marching along our original image.
Dialogue: 0,0:08:59.81,0:09:04.17,CHN,,0,0,0,,用一个 3×3 的网格沿着原图像移动
Dialogue: 0,0:09:04.17,0:09:07.34,ENG,,0,0,0,,And if we zoom in, each one of those values is one ninth.
Dialogue: 0,0:09:04.17,0:09:07.34,CHN,,0,0,0,,放大后  每个数都是 1/9
Dialogue: 0,0:09:07.34,0:09:09.18,ENG,,0,0,0,,And what I'm doing at each iteration
Dialogue: 0,0:09:07.34,0:09:09.18,CHN,,0,0,0,,在每次迭代的时候
Dialogue: 0,0:09:09.18,0:09:13.73,ENG,,0,0,0,,is multiplying each of those values by the corresponding pixel that it sits on top of.
Dialogue: 0,0:09:09.18,0:09:13.73,CHN,,0,0,0,,将这些数值乘以它底下对应的像素值
Dialogue: 0,0:09:13.73,0:09:16.21,ENG,,0,0,0,,And of course in computer science, we think of colors
Dialogue: 0,0:09:13.73,0:09:16.21,CHN,,0,0,0,,当然在计算机科学中
Dialogue: 0,0:09:16.21,0:09:18.20,ENG,,0,0,0,,as little vectors of three values
Dialogue: 0,0:09:16.21,0:09:18.20,CHN,,0,0,0,,我们把颜色当成三维向量
Dialogue: 0,0:09:18.20,0:09:20.52,ENG,,0,0,0,,representing the red, green and blue components.
Dialogue: 0,0:09:18.20,0:09:20.52,CHN,,0,0,0,,三个分量分别代表红、绿、蓝
Dialogue: 0,0:09:20.52,0:09:24.34,ENG,,0,0,0,,When I multiply all these little values by one ninth and I add them together,
Dialogue: 0,0:09:20.52,0:09:24.34,CHN,,0,0,0,,把每个向量都乘以 1/9 然后求和
Dialogue: 0,0:09:24.34,0:09:27.07,ENG,,0,0,0,,it gives us an average along each color channel
Dialogue: 0,0:09:24.34,0:09:27.07,CHN,,0,0,0,,就得到了每个颜色通道的平均值
Dialogue: 0,0:09:27.07,0:09:31.48,ENG,,0,0,0,,and the corresponding pixel for the image on the right is defined to be that sum.
Dialogue: 0,0:09:27.07,0:09:31.48,CHN,,0,0,0,,那么右图中对应的像素就是这个加和
Dialogue: 0,0:09:31.93,0:09:35.60,ENG,,0,0,0,,The overall effect as we do this for every single pixel on the image,
Dialogue: 0,0:09:31.93,0:09:35.60,CHN,,0,0,0,,对每个像素都这么计算  得到的效果是
Dialogue: 0,0:09:35.60,0:09:38.75,ENG,,0,0,0,,is that each one kind of bleeds into all of its neighbours
Dialogue: 0,0:09:35.60,0:09:38.75,CHN,,0,0,0,,每个像素都混杂了一部分到相邻的像素中
Dialogue: 0,0:09:38.75,0:09:41.21,ENG,,0,0,0,,which gives us a blurrier version than the original.
Dialogue: 0,0:09:38.75,0:09:41.21,CHN,,0,0,0,,这就得到了一个比原图更模糊的版本
Dialogue: 0,0:09:41.82,0:09:43.93,ENG,,0,0,0,,In the lingo, we'd say that the image on the right
Dialogue: 0,0:09:41.82,0:09:43.93,ENG,,0,0,0,, 
Dialogue: 0,0:09:43.93,0:09:48.15,ENG,,0,0,0,,is a convolution of our original image with the little grid of values.
Dialogue: 0,0:09:41.82,0:09:48.15,CHN,,0,0,0,,用术语来说  右图就是原图和小网格的卷积
Dialogue: 0,0:09:48.15,0:09:49.93,ENG,,0,0,0,,Or more technically, maybe I should say that
Dialogue: 0,0:09:48.15,0:09:49.93,CHN,,0,0,0,,严格上讲  应该是
Dialogue: 0,0:09:49.93,0:09:54.76,ENG,,0,0,0,,it's the convolution with a 180 degree rotated version of that little grid of values.
Dialogue: 0,0:09:49.93,0:09:54.76,CHN,,0,0,0,,和旋转 180 度的网格的卷积
Dialogue: 0,0:09:54.76,0:09:56.89,ENG,,0,0,0,,Not that it matters when the grid is symmetric
Dialogue: 0,0:09:54.76,0:09:56.89,CHN,,0,0,0,,当然这在网格对称时没什么分别
Dialogue: 0,0:09:56.89,0:09:58.30,ENG,,0,0,0,,but it's just worth keeping in mind that
Dialogue: 0,0:09:56.89,0:09:58.30,CHN,,0,0,0,,但还是值得注意一下
Dialogue: 0,0:09:58.30,0:10:02.30,ENG,,0,0,0,,the definition of a convolution, as inherited from the pure math context,
Dialogue: 0,0:09:58.30,0:10:02.30,CHN,,0,0,0,,卷积的定义是从纯数学语境继承下来的
Dialogue: 0,0:10:02.30,0:10:05.41,ENG,,0,0,0,,should always invite you to think about flipping around that second array.
Dialogue: 0,0:10:02.30,0:10:05.41,CHN,,0,0,0,,你要牢记这个定义  把第二个数组翻转
Dialogue: 0,0:10:05.84,0:10:07.27,ENG,,0,0,0,,If we modify this slightly,
Dialogue: 0,0:10:05.84,0:10:07.27,CHN,,0,0,0,,如果我们稍微修改一下这个例子
Dialogue: 0,0:10:07.27,0:10:09.28,ENG,,0,0,0,,we can get a much more elegant blurring effect
Dialogue: 0,0:10:07.27,0:10:09.28,CHN,,0,0,0,,我们可以通过选择给网格赋予不同的数值
Dialogue: 0,0:10:09.28,0:10:11.41,ENG,,0,0,0,,by choosing a different grid of values.
Dialogue: 0,0:10:09.28,0:10:11.41,CHN,,0,0,0,,来得到更为美观的模糊效果
Dialogue: 0,0:10:11.41,0:10:13.76,ENG,,0,0,0,,In this case, I have a little 5×5 grid,
Dialogue: 0,0:10:11.41,0:10:13.76,CHN,,0,0,0,,这个例子中  有一个 5×5 网格
Dialogue: 0,0:10:13.76,0:10:16.01,ENG,,0,0,0,,but the distinction is not so much its size.
Dialogue: 0,0:10:13.76,0:10:16.01,CHN,,0,0,0,,但是其大小不是主要的不同
Dialogue: 0,0:10:16.01,0:10:18.48,ENG,,0,0,0,,If we zoom in, we notice that the value in the middle
Dialogue: 0,0:10:16.01,0:10:18.48,CHN,,0,0,0,,如果放大  我们可以看到中间的值
Dialogue: 0,0:10:18.48,0:10:20.75,ENG,,0,0,0,,is a lot bigger than the value towards the edges.
Dialogue: 0,0:10:18.48,0:10:20.75,CHN,,0,0,0,,比边上的值大很多
Dialogue: 0,0:10:21.17,0:10:24.45,ENG,,0,0,0,,And where this is coming from, is they're all sampled from a bell curve
Dialogue: 0,0:10:21.17,0:10:24.45,CHN,,0,0,0,,究其根源  这些值都从一个钟形曲线中采样得来
Dialogue: 0,0:10:24.45,0:10:26.27,ENG,,0,0,0,,known as a Gaussian distribution.
Dialogue: 0,0:10:24.45,0:10:26.27,CHN,,0,0,0,,这个曲线叫做高斯分布
Dialogue: 0,0:10:26.85,0:10:29.09,ENG,,0,0,0,,That way, when we multiply all of these values
Dialogue: 0,0:10:26.85,0:10:29.09,CHN,,0,0,0,,这样  当我们将这些数乘以
Dialogue: 0,0:10:29.09,0:10:31.71,ENG,,0,0,0,,by the corresponding pixel that they're sitting on top of,
Dialogue: 0,0:10:29.09,0:10:31.71,CHN,,0,0,0,,它们下面对应的像素时
Dialogue: 0,0:10:31.71,0:10:34.32,ENG,,0,0,0,,we're giving a lot more weight to that central pixel
Dialogue: 0,0:10:31.71,0:10:34.32,CHN,,0,0,0,,我们把更多的权重给了中间像素
Dialogue: 0,0:10:34.32,0:10:36.60,ENG,,0,0,0,,and much less towards the ones out at the edge.
Dialogue: 0,0:10:34.32,0:10:36.60,CHN,,0,0,0,,而只把很少的权重给了边上的像素
Dialogue: 0,0:10:36.60,0:10:40.70,ENG,,0,0,0,,And just as before, the corresponding pixel on the right is defined to be this sum.
Dialogue: 0,0:10:36.60,0:10:40.70,CHN,,0,0,0,,和之前一样  右图中对应的像素就是这个加和
Dialogue: 0,0:10:41.29,0:10:43.60,ENG,,0,0,0,,As we do this process for every single pixel,
Dialogue: 0,0:10:41.29,0:10:43.60,CHN,,0,0,0,,随着我们对每个像素都重复这个过程
Dialogue: 0,0:10:43.60,0:10:46.50,ENG,,0,0,0,,it gives a blurring effect which much more authentically simulates
Dialogue: 0,0:10:43.60,0:10:46.50,CHN,,0,0,0,,我们得到了一个模糊效果
Dialogue: 0,0:10:46.50,0:10:49.81,ENG,,0,0,0,,the notion of putting your lens out of focus or something like that.
Dialogue: 0,0:10:46.50,0:10:49.81,CHN,,0,0,0,,它更真实地模拟了镜头失焦之类的场景
Dialogue: 0,0:10:49.81,0:10:53.77,ENG,,0,0,0,,But blurring is far from the only thing that you can do with this idea.
Dialogue: 0,0:10:49.81,0:10:53.77,CHN,,0,0,0,,但是这个方法能做到的事情  远远不止模糊图片
Dialogue: 0,0:10:53.77,0:10:56.63,ENG,,0,0,0,,For instance, take a look at this little grid of values
Dialogue: 0,0:10:53.77,0:10:56.63,CHN,,0,0,0,,比如这个数值网格
Dialogue: 0,0:10:56.63,0:10:58.95,ENG,,0,0,0,,which involves some positive numbers on the left
Dialogue: 0,0:10:56.63,0:10:58.95,CHN,,0,0,0,,正数在左
Dialogue: 0,0:10:58.95,0:11:00.81,ENG,,0,0,0,,and some negative numbers on the right,
Dialogue: 0,0:10:58.95,0:11:00.81,CHN,,0,0,0,,负数在右
Dialogue: 0,0:11:00.81,0:11:03.56,ENG,,0,0,0,,which I'll color with blue and red respectively.
Dialogue: 0,0:11:00.81,0:11:03.56,CHN,,0,0,0,,我们来把它们分别填充为蓝色和红色
Dialogue: 0,0:11:03.56,0:11:06.15,ENG,,0,0,0,,Take a moment to see if you can predict and understand
Dialogue: 0,0:11:03.56,0:11:06.15,CHN,,0,0,0,,思考一下 看看你能否预测并理解
Dialogue: 0,0:11:06.15,0:11:08.78,ENG,,0,0,0,,what effect this will have on the final image.
Dialogue: 0,0:11:06.15,0:11:08.78,CHN,,0,0,0,,这个网格会如何影响最终图像
Dialogue: 0,0:11:10.66,0:11:15.03,ENG,,0,0,0,,So in this case, I'll just be thinking of the image as grayscale instead of coloured.
Dialogue: 0,0:11:10.66,0:11:15.03,CHN,,0,0,0,,这里只把图像考虑为灰度图而不是彩色图
Dialogue: 0,0:11:15.03,0:11:18.39,ENG,,0,0,0,,So each of the pixels is just represented by one number instead of three.
Dialogue: 0,0:11:15.03,0:11:18.39,CHN,,0,0,0,,这样每个像素就可以只用一个数来表示  而不是三个
Dialogue: 0,0:11:18.39,0:11:21.44,ENG,,0,0,0,,And one thing worth noticing is that as we do this convolution,
Dialogue: 0,0:11:18.39,0:11:21.44,CHN,,0,0,0,,值得一提的是  计算卷积的过程中
Dialogue: 0,0:11:21.44,0:11:23.52,ENG,,0,0,0,,it's possible to get negative values.
Dialogue: 0,0:11:21.44,0:11:23.52,CHN,,0,0,0,,是有可能得到负值的
Dialogue: 0,0:11:23.52,0:11:25.66,ENG,,0,0,0,,For example, at this point here if we zoom in,
Dialogue: 0,0:11:23.52,0:11:25.66,CHN,,0,0,0,,比如这里 放大可以看见
Dialogue: 0,0:11:25.66,0:11:28.80,ENG,,0,0,0,,the left half of our little grid sits entirely on top of black pixels
Dialogue: 0,0:11:25.66,0:11:28.80,CHN,,0,0,0,,网格左半边都在黑色像素上
Dialogue: 0,0:11:28.80,0:11:30.54,ENG,,0,0,0,,which would have a value of zero.
Dialogue: 0,0:11:28.80,0:11:30.54,CHN,,0,0,0,,所以会得到 0
Dialogue: 0,0:11:30.54,0:11:34.30,ENG,,0,0,0,,But the right half of negative values all sit on top of white pixels
Dialogue: 0,0:11:30.54,0:11:34.30,CHN,,0,0,0,,而网格右半边的负值都在白色像素上
Dialogue: 0,0:11:34.30,0:11:35.68,ENG,,0,0,0,, which would have a value of one.
Dialogue: 0,0:11:34.30,0:11:35.68,CHN,,0,0,0,,所以会得到 1
Dialogue: 0,0:11:36.16,0:11:39.33,ENG,,0,0,0,,So when we multiply corresponding terms and add them together,
Dialogue: 0,0:11:36.16,0:11:39.33,CHN,,0,0,0,,所以把对应项相乘再把结果相加
Dialogue: 0,0:11:39.33,0:11:41.15,ENG,,0,0,0,,the result will be very negative.
Dialogue: 0,0:11:39.33,0:11:41.15,CHN,,0,0,0,,会得到负数值
Dialogue: 0,0:11:41.15,0:11:43.41,ENG,,0,0,0,,And the way I'm displaying this with the image on the right,
Dialogue: 0,0:11:41.15,0:11:43.41,CHN,,0,0,0,,我在右图中表示这点的方法
Dialogue: 0,0:11:43.41,0:11:46.81,ENG,,0,0,0,,is to color negative values red and positive values blue.
Dialogue: 0,0:11:43.41,0:11:46.81,CHN,,0,0,0,,是把负数填充为红色  把正数填充为蓝色
Dialogue: 0,0:11:46.81,0:11:48.08,ENG,,0,0,0,,Another thing to notice is that
Dialogue: 0,0:11:46.81,0:11:48.08,CHN,,0,0,0,,另外需要注意
Dialogue: 0,0:11:48.08,0:11:51.59,ENG,,0,0,0,,when you are on a patch that's all the same color, everything goes to zero
Dialogue: 0,0:11:48.08,0:11:51.59,CHN,,0,0,0,,当所有小块都是同一颜色时  结果是 0
Dialogue: 0,0:11:51.59,0:11:54.38,ENG,,0,0,0,,since the sum of the values in our little grid is zero.
Dialogue: 0,0:11:51.59,0:11:54.38,CHN,,0,0,0,,这是因为网格中所有值相加为 0
Dialogue: 0,0:11:55.33,0:11:57.42,ENG,,0,0,0,,This is very different from the previous two examples
Dialogue: 0,0:11:55.33,0:11:57.42,CHN,,0,0,0,,这和之前的两个例子大为不同
Dialogue: 0,0:11:57.42,0:11:59.28,ENG,,0,0,0,,where the sum of our little grid was one,
Dialogue: 0,0:11:57.42,0:11:59.28,CHN,,0,0,0,,因为之前的例子里网格里数值的加和为 1
Dialogue: 0,0:11:59.28,0:12:02.47,ENG,,0,0,0,,which let us interpret it as a moving average and hence a blur.
Dialogue: 0,0:11:59.28,0:12:02.47,CHN,,0,0,0,,我们可以将其考虑为滑动平均  也就是模糊了图像
Dialogue: 0,0:12:03.69,0:12:06.32,ENG,,0,0,0,,All in all, this little process basically detects
Dialogue: 0,0:12:03.69,0:12:06.32,CHN,,0,0,0,,总而言之  这个过程是在
Dialogue: 0,0:12:06.32,0:12:10.37,ENG,,0,0,0,,wherever there is variation in the pixel value as you move from left to right.
Dialogue: 0,0:12:06.32,0:12:10.37,CHN,,0,0,0,,检测像素值从左到右是否有变化
Dialogue: 0,0:12:10.37,0:12:14.00,ENG,,0,0,0,,And so it gives you a kind of way to pick up on all the vertical edges from your image.
Dialogue: 0,0:12:10.37,0:12:14.00,CHN,,0,0,0,,所以它可以判别出图像中的所有竖向的边界
Dialogue: 0,0:12:16.75,0:12:18.97,ENG,,0,0,0,,And similarly, if we rotated that grid around
Dialogue: 0,0:12:16.75,0:12:18.97,CHN,,0,0,0,,用同样的逻辑  如果我们旋转这个网格
Dialogue: 0,0:12:18.97,0:12:21.72,ENG,,0,0,0,,so that it varies as you move from the top to the bottom,
Dialogue: 0,0:12:18.97,0:12:21.72,CHN,,0,0,0,,使得它从上到下变化
Dialogue: 0,0:12:21.72,0:12:24.41,ENG,,0,0,0,,this will be picking up on all the horizontal edges.
Dialogue: 0,0:12:21.72,0:12:24.41,CHN,,0,0,0,,那么它就可以判别出图像中的所有横向的边界
Dialogue: 0,0:12:24.41,0:12:27.16,ENG,,0,0,0,,Which in the case of our little pi creature image,
Dialogue: 0,0:12:24.41,0:12:27.16,ENG,,0,0,0,, 
Dialogue: 0,0:12:27.16,0:12:29.49,ENG,,0,0,0,,does result in some pretty demonic eyes.
Dialogue: 0,0:12:24.41,0:12:29.49,CHN,,0,0,0,,在这个例子中  它把 π 酱的眼睛变得像个大反派
Dialogue: 0,0:12:30.43,0:12:33.42,ENG,,0,0,0,,This smaller grid, by the way, is often called a kernel.
Dialogue: 0,0:12:30.43,0:12:33.42,CHN,,0,0,0,,顺便一提  这个小网格一般叫做“核”
Dialogue: 0,0:12:33.42,0:12:36.06,ENG,,0,0,0,,And the beauty here is how just by choosing a different kernel,
Dialogue: 0,0:12:33.42,0:12:36.06,CHN,,0,0,0,,巧妙之处在于  仅仅通过选择不同的核
Dialogue: 0,0:12:36.06,0:12:38.02,ENG,,0,0,0,,you can get different image processing effect.
Dialogue: 0,0:12:36.06,0:12:38.02,CHN,,0,0,0,,就可以产生不同的图像处理效果
Dialogue: 0,0:12:38.02,0:12:40.93,ENG,,0,0,0,,Not just blurring your edge detection but also things like sharpening.
Dialogue: 0,0:12:38.02,0:12:40.93,CHN,,0,0,0,,不只是模糊化边缘检测  图像的锐化也是可以的
Dialogue: 0,0:12:41.42,0:12:44.08,ENG,,0,0,0,,For those of you who have heard of a convolutional neural network,
Dialogue: 0,0:12:41.42,0:12:44.08,CHN,,0,0,0,,如果你听说过卷积神经网络的话
Dialogue: 0,0:12:44.08,0:12:46.30,ENG,,0,0,0,,the idea there is to use data to figure out
Dialogue: 0,0:12:44.08,0:12:46.30,CHN,,0,0,0,,它的思路就是用数据来算出
Dialogue: 0,0:12:46.30,0:12:48.45,ENG,,0,0,0,,what the kernels should be in the first place.
Dialogue: 0,0:12:46.30,0:12:48.45,CHN,,0,0,0,,应该选取什么样的核
Dialogue: 0,0:12:48.45,0:12:51.61,ENG,,0,0,0,,As determined by whatever the neural network wants to detect.
Dialogue: 0,0:12:48.45,0:12:51.61,CHN,,0,0,0,,这取决于想用神经网络来检测的目标
Dialogue: 0,0:12:52.73,0:12:55.80,ENG,,0,0,0,,Another thing I should maybe bring up is the length of the output.
Dialogue: 0,0:12:52.73,0:12:55.80,CHN,,0,0,0,,另一个应该提一嘴的事情是输出的长度
Dialogue: 0,0:12:55.80,0:12:57.72,ENG,,0,0,0,,For something like the moving average example,
Dialogue: 0,0:12:55.80,0:12:57.72,CHN,,0,0,0,,对滑动平均之类的情况
Dialogue: 0,0:12:57.72,0:12:59.54,ENG,,0,0,0,,you might only want to think about the terms
Dialogue: 0,0:12:57.72,0:12:59.54,ENG,,0,0,0,, 
Dialogue: 0,0:12:59.54,0:13:02.27,ENG,,0,0,0,,when both of the windows fully align with each other.
Dialogue: 0,0:12:57.72,0:13:02.27,CHN,,0,0,0,,可能只需要考虑取样窗口完全对应的情况就好了
Dialogue: 0,0:13:02.27,0:13:04.25,ENG,,0,0,0,,Or in the image processing example,
Dialogue: 0,0:13:02.27,0:13:04.25,CHN,,0,0,0,,或者在图像处理的应用中
Dialogue: 0,0:13:04.25,0:13:07.76,ENG,,0,0,0,,maybe you want the final output to have the same size as the original.
Dialogue: 0,0:13:04.25,0:13:07.76,CHN,,0,0,0,,可能你想要保持输出图像的尺寸和原图像相同
Dialogue: 0,0:13:07.76,0:13:10.38,ENG,,0,0,0,,Now, convolutions as a pure math operation,
Dialogue: 0,0:13:07.76,0:13:10.38,CHN,,0,0,0,,其实  纯数学过程上的卷积
Dialogue: 0,0:13:10.38,0:13:14.06,ENG,,0,0,0,,always produce an array that's bigger than the two arrays that you started with.
Dialogue: 0,0:13:10.38,0:13:14.06,CHN,,0,0,0,,产生的数组总是比两个初始数组更长
Dialogue: 0,0:13:14.06,0:13:16.65,ENG,,0,0,0,,at least assuming one of them doesn't have a length of one.
Dialogue: 0,0:13:14.06,0:13:16.65,CHN,,0,0,0,,至少在数组长度都大于 1 的时候是这样的
Dialogue: 0,0:13:16.65,0:13:19.19,ENG,,0,0,0,,Just know that in certain computer science context,
Dialogue: 0,0:13:16.65,0:13:19.19,CHN,,0,0,0,,你只需知道在某些计算机科学的背景下
Dialogue: 0,0:13:19.19,0:13:21.67,ENG,,0,0,0,,you often want to deliberately truncate that output.
Dialogue: 0,0:13:19.19,0:13:21.67,CHN,,0,0,0,,你需要刻意截掉一些输出值
Dialogue: 0,0:13:24.73,0:13:28.13,ENG,,0,0,0,,Another thing worth highlighting is that in the computer science context,
Dialogue: 0,0:13:24.73,0:13:28.13,CHN,,0,0,0,,另外值得一提的是  在计算机科学的语境下
Dialogue: 0,0:13:28.13,0:13:32.31,ENG,,0,0,0,,this notion of flipping around that kernel before you let it march across the original,
Dialogue: 0,0:13:28.13,0:13:32.31,CHN,,0,0,0,,将核翻转后再遍历原数组
Dialogue: 0,0:13:32.31,0:13:35.14,ENG,,0,0,0,,often feels really weird and just uncalled for.
Dialogue: 0,0:13:32.31,0:13:35.14,CHN,,0,0,0,,经常感觉非常奇怪且没必要
Dialogue: 0,0:13:35.14,0:13:38.52,ENG,,0,0,0,,But again, note that that's what's inherited from the pure math context,
Dialogue: 0,0:13:35.14,0:13:38.52,CHN,,0,0,0,,但是  这一样是从纯数学背景中继承而来的
Dialogue: 0,0:13:38.52,0:13:40.62,ENG,,0,0,0,,where like we saw with the probabilities,
Dialogue: 0,0:13:38.52,0:13:40.62,CHN,,0,0,0,,而就像在概率的例子中所见的
Dialogue: 0,0:13:40.62,0:13:42.93,ENG,,0,0,0,,it's an incredibly natural thing to do.
Dialogue: 0,0:13:40.62,0:13:42.93,CHN,,0,0,0,,这个翻转再正常不过了
Dialogue: 0,0:13:42.93,0:13:45.72,ENG,,0,0,0,,And actually, I can show you one more pure math example
Dialogue: 0,0:13:42.93,0:13:45.72,CHN,,0,0,0,,其实  我还可以再展示一个纯数学的例子
Dialogue: 0,0:13:45.72,0:13:48.27,ENG,,0,0,0,,where even the programmers should care about this one
Dialogue: 0,0:13:45.72,0:13:48.27,CHN,,0,0,0,,即使是纯程序员也应该关心此例
Dialogue: 0,0:13:48.27,0:13:52.54,ENG,,0,0,0,,because it opens the doors for much faster algorithm to compute all of these.
Dialogue: 0,0:13:48.27,0:13:52.54,CHN,,0,0,0,,因为它引入了一个计算卷积时快得多的算法
Dialogue: 0,0:13:52.54,0:13:54.60,ENG,,0,0,0,,To set up what I mean by faster here,
Dialogue: 0,0:13:52.54,0:13:54.60,CHN,,0,0,0,,为了解释我说的快得多是什么意思
Dialogue: 0,0:13:54.60,0:13:57.01,ENG,,0,0,0,,let me go back and pull up some Python again
Dialogue: 0,0:13:54.60,0:13:57.01,CHN,,0,0,0,,我来掏出 Python 再写点东西
Dialogue: 0,0:13:57.01,0:13:59.84,ENG,,0,0,0,,and I'm going to create two different relatively big arrays.
Dialogue: 0,0:13:57.01,0:13:59.84,CHN,,0,0,0,,这次我会建两个不同的长数组
Dialogue: 0,0:13:59.84,0:14:02.74,ENG,,0,0,0,,each one will have 100,000 random elements in it
Dialogue: 0,0:13:59.84,0:14:02.74,CHN,,0,0,0,,每个中会有 100,000 个随机元素
Dialogue: 0,0:14:02.74,0:14:08.09,ENG,,0,0,0,,and I'm going to assess the run time of the convolve function from the Numpy library.
Dialogue: 0,0:14:02.74,0:14:08.09,CHN,,0,0,0,,监测一下 NumPy 库中 convolve 函数的运行时间 {\pos(1045, 1060)}{\fs40}卷积
Dialogue: 0,0:14:08.09,0:14:12.10,ENG,,0,0,0,,And in this case, it runs it for multiple different iterations, tries to find an average
Dialogue: 0,0:14:08.09,0:14:12.10,CHN,,0,0,0,,在这个案例中  它输出的是多次迭代中的平均用时
Dialogue: 0,0:14:12.10,0:14:16.92,ENG,,0,0,0,,and it looks like on this computer, at least, it averages at 4.87 seconds.
Dialogue: 0,0:14:12.10,0:14:16.92,CHN,,0,0,0,,至少在这台计算机上  看起来平均用时是 4.87 秒
Dialogue: 0,0:14:16.92,0:14:22.45,ENG,,0,0,0,,By contrast, if I use a different function from the SciPy library called fftconvolve,
Dialogue: 0,0:14:16.92,0:14:22.45,CHN,,0,0,0,,然而  如果我改用 SciPy 库中的 fftconvolve 函数 {\pos(1310, 1060)}{\fs40}快速傅里叶变换卷积
Dialogue: 0,0:14:22.45,0:14:25.07,ENG,,0,0,0,,which is the same just implemented differently,
Dialogue: 0,0:14:22.45,0:14:25.07,CHN,,0,0,0,,它们功能一样  只是实现方法不一样
Dialogue: 0,0:14:25.07,0:14:28.21,ENG,,0,0,0,,that only takes 4.3 milliseconds on average.
Dialogue: 0,0:14:25.07,0:14:28.21,CHN,,0,0,0,,这次计算平均只用了 4.3 毫秒
Dialogue: 0,0:14:28.21,0:14:30.71,ENG,,0,0,0,,So, three orders of magnitude improvement.
Dialogue: 0,0:14:28.21,0:14:30.71,CHN,,0,0,0,,这可是 3 个数量级的优化
Dialogue: 0,0:14:30.71,0:14:33.16,ENG,,0,0,0,,And again, even though it flies under a different name,
Dialogue: 0,0:14:30.71,0:14:33.16,CHN,,0,0,0,,再强调一下  即使它们的名字不同
Dialogue: 0,0:14:33.16,0:14:36.00,ENG,,0,0,0,,it's giving the same output that the other convolve function does,
Dialogue: 0,0:14:33.16,0:14:36.00,CHN,,0,0,0,,但它和另一个卷积函数给出的输出是相同的
Dialogue: 0,0:14:36.00,0:14:39.16,ENG,,0,0,0,,it's just doing something to go about it in a cleverer way.
Dialogue: 0,0:14:36.00,0:14:39.16,CHN,,0,0,0,,只是用了某种更巧妙的计算方法
Dialogue: 0,0:14:42.17,0:14:44.49,ENG,,0,0,0,,Remember how with the probability example,
Dialogue: 0,0:14:42.17,0:14:44.49,CHN,,0,0,0,,还记得刚才那个概率论的例子吗
Dialogue: 0,0:14:44.49,0:14:46.96,ENG,,0,0,0,,I said another way you could think about the convolution
Dialogue: 0,0:14:44.49,0:14:46.96,CHN,,0,0,0,,我提到了另一种考虑卷积的方式
Dialogue: 0,0:14:46.96,0:14:49.84,ENG,,0,0,0,,was to create this table of all the pairwise products
Dialogue: 0,0:14:46.96,0:14:49.84,CHN,,0,0,0,,就是建立这个表格来计算各组合的乘积
Dialogue: 0,0:14:49.84,0:14:52.90,ENG,,0,0,0,,and then add up those pairwise products along the diagonals.
Dialogue: 0,0:14:49.84,0:14:52.90,CHN,,0,0,0,,然后沿着每条对角线求和
Dialogue: 0,0:14:53.62,0:14:55.65,ENG,,0,0,0,,There's, of course, nothing specific to probability.
Dialogue: 0,0:14:53.62,0:14:55.65,CHN,,0,0,0,,当然  这办法不只在概率论里用得上
Dialogue: 0,0:14:55.65,0:14:57.89,ENG,,0,0,0,,Anytime you're convolving two different lists of numbers,
Dialogue: 0,0:14:55.65,0:14:57.89,CHN,,0,0,0,,只要是要求两个数组的卷积时
Dialogue: 0,0:14:57.89,0:14:59.42,ENG,,0,0,0,,you can think about it this way.
Dialogue: 0,0:14:57.89,0:14:59.42,CHN,,0,0,0,,你都能这么思考
Dialogue: 0,0:14:59.42,0:15:02.61,ENG,,0,0,0,,Create this kind of multiplication table with all Pairwise products
Dialogue: 0,0:14:59.42,0:15:02.61,CHN,,0,0,0,,先建一个表格来计算组合乘积
Dialogue: 0,0:15:02.61,0:15:06.66,ENG,,0,0,0,,and then each sum along the diagonal, corresponds to one of your final outputs.
Dialogue: 0,0:15:02.61,0:15:06.66,CHN,,0,0,0,,再沿每条对角线求和  就对应着每一个输出结果
Dialogue: 0,0:15:07.58,0:15:10.34,ENG,,0,0,0,,One context where this view is especially natural,
Dialogue: 0,0:15:07.58,0:15:10.34,CHN,,0,0,0,,有一种情况会让这种视角显得非常自然
Dialogue: 0,0:15:10.34,0:15:13.29,ENG,,0,0,0,,is when you multiply together two polynomials.
Dialogue: 0,0:15:10.34,0:15:13.29,CHN,,0,0,0,,就是当将两个多项式相乘时
Dialogue: 0,0:15:13.29,0:15:15.47,ENG,,0,0,0,,For example, let me take the little grid we already have
Dialogue: 0,0:15:13.29,0:15:15.47,CHN,,0,0,0,,比如用这个我们已经有的网格
Dialogue: 0,0:15:15.47,0:15:19.80,ENG,,0,0,0,,and replace the top terms with 1, 2x and 3x²
Dialogue: 0,0:15:15.47,0:15:19.80,CHN,,0,0,0,,将上方的项替换为 1, 2x 和 3x²
Dialogue: 0,0:15:19.80,0:15:24.00,ENG,,0,0,0,,and replace the other terms with 4, 5x and 6x².
Dialogue: 0,0:15:19.80,0:15:24.00,CHN,,0,0,0,,将左侧的项替换为 4, 5x 和 6x²
Dialogue: 0,0:15:24.00,0:15:26.03,ENG,,0,0,0,,Now, think about what it means when we're creating
Dialogue: 0,0:15:24.00,0:15:26.03,CHN,,0,0,0,,然后来思考一下
Dialogue: 0,0:15:26.03,0:15:29.39,ENG,,0,0,0,,all of these different pairwise products between the two lists.
Dialogue: 0,0:15:26.03,0:15:29.39,CHN,,0,0,0,,这些组合的乘积意味着什么
Dialogue: 0,0:15:29.39,0:15:31.78,ENG,,0,0,0,,What you're doing is essentially expanding out
Dialogue: 0,0:15:29.39,0:15:31.78,CHN,,0,0,0,,其实本质上你在做一个多项式展开
Dialogue: 0,0:15:31.78,0:15:34.98,ENG,,0,0,0,,the full product of the two polynomials I have written down.
Dialogue: 0,0:15:31.78,0:15:34.98,CHN,,0,0,0,,即求两个多项式的全乘积
Dialogue: 0,0:15:34.98,0:15:37.32,ENG,,0,0,0,,And then when you add up along the diagonal,
Dialogue: 0,0:15:34.98,0:15:37.32,CHN,,0,0,0,,当你沿对角线求和
Dialogue: 0,0:15:37.32,0:15:41.53,ENG,,0,0,0,,that corresponds to collecting all like terms, which is pretty neat,
Dialogue: 0,0:15:37.32,0:15:41.53,CHN,,0,0,0,,其实就是在合并同类项  非常简洁优雅
Dialogue: 0,0:15:41.53,0:15:44.00,ENG,,0,0,0,,expanding a polynomial and collecting like terms
Dialogue: 0,0:15:41.53,0:15:44.00,CHN,,0,0,0,,扩展多项式然后合并同类项
Dialogue: 0,0:15:44.00,0:15:46.60,ENG,,0,0,0,,is exactly the same process as a convolution.
Dialogue: 0,0:15:44.00,0:15:46.60,CHN,,0,0,0,,其实和卷积的过程是一模一样的
Dialogue: 0,0:15:47.88,0:15:50.76,ENG,,0,0,0,,But this allows us to do something that's pretty cool.
Dialogue: 0,0:15:47.88,0:15:50.76,CHN,,0,0,0,,基于此我们可以做些更棒的事情
Dialogue: 0,0:15:50.76,0:15:52.58,ENG,,0,0,0,,Because think about what we're saying here,
Dialogue: 0,0:15:50.76,0:15:52.58,CHN,,0,0,0,,稍微回想一下我们在做的事情
Dialogue: 0,0:15:52.58,0:15:55.03,ENG,,0,0,0,,we're saying if you take two different functions
Dialogue: 0,0:15:52.58,0:15:55.03,CHN,,0,0,0,,我们是将两个不同的函数
Dialogue: 0,0:15:55.03,0:15:56.58,ENG,,0,0,0,,and you multiply them together,
Dialogue: 0,0:15:55.03,0:15:56.58,CHN,,0,0,0,,进行相乘
Dialogue: 0,0:15:56.58,0:15:58.91,ENG,,0,0,0,,which is a simple point wise operation,
Dialogue: 0,0:15:56.58,0:15:58.91,CHN,,0,0,0,,也就是进行一个简单的逐点运算
Dialogue: 0,0:15:58.91,0:16:01.59,ENG,,0,0,0,,that's the same thing as if you had first extracted
Dialogue: 0,0:15:58.91,0:16:01.59,CHN,,0,0,0,,这相当于
Dialogue: 0,0:16:01.59,0:16:05.30,ENG,,0,0,0,,the coefficients from each one of those, assuming they're polynomials,
Dialogue: 0,0:16:01.59,0:16:05.30,CHN,,0,0,0,,假设他们为多项式  首先提取多项式的系数
Dialogue: 0,0:16:05.30,0:16:09.52,ENG,,0,0,0,,and then taking a convolution of those two lists of coefficients.
Dialogue: 0,0:16:05.30,0:16:09.52,CHN,,0,0,0,,然后对这些系数组成的数组进行卷积
Dialogue: 0,0:16:09.52,0:16:11.30,ENG,,0,0,0,,What makes that so interesting is that
Dialogue: 0,0:16:09.52,0:16:11.30,CHN,,0,0,0,,非常有意思的是
Dialogue: 0,0:16:11.30,0:16:15.84,ENG,,0,0,0,,convolutions feel, in principle, a lot more complicated than simple multiplication.
Dialogue: 0,0:16:11.30,0:16:15.84,CHN,,0,0,0,,卷积看起来要比直接相乘复杂那么一点儿
Dialogue: 0,0:16:15.84,0:16:18.72,ENG,,0,0,0,,And I don't just mean conceptually they are harder to think about,
Dialogue: 0,0:16:15.84,0:16:18.72,CHN,,0,0,0,,我不光是说它在概念上更难理解
Dialogue: 0,0:16:18.72,0:16:22.70,ENG,,0,0,0,,I mean computationally it requires more steps to perform a convolution
Dialogue: 0,0:16:18.72,0:16:22.70,CHN,,0,0,0,,我的意思是相比较对两个数组进行逐点乘积来说
Dialogue: 0,0:16:22.70,0:16:26.45,ENG,,0,0,0,,than it does to perform a point wise product of two different lists.
Dialogue: 0,0:16:22.70,0:16:26.45,CHN,,0,0,0,,卷积需要更多的步骤来执行计算
Dialogue: 0,0:16:26.45,0:16:29.60,ENG,,0,0,0,,For example, let's say I gave you two really big polynomials.
Dialogue: 0,0:16:26.45,0:16:29.60,CHN,,0,0,0,,打个比方  我这有俩很长很长的多项式
Dialogue: 0,0:16:29.60,0:16:32.53,ENG,,0,0,0,,Say each one with 100 different coefficients.
Dialogue: 0,0:16:29.60,0:16:32.53,CHN,,0,0,0,,每个有 100 个项和相应的系数
Dialogue: 0,0:16:32.53,0:16:36.16,ENG,,0,0,0,,Then if the way you multiply them was to expand out this product,
Dialogue: 0,0:16:32.53,0:16:36.16,CHN,,0,0,0,,如果你通过相乘系数的办法来展开多项式
Dialogue: 0,0:16:36.16,0:16:40.44,ENG,,0,0,0,,you know, filling in this entire 100×100 grid of pairwise products,
Dialogue: 0,0:16:36.16,0:16:40.44,CHN,,0,0,0,,你就要填满这个 100×100 的数组乘积网格
Dialogue: 0,0:16:40.44,0:16:43.68,ENG,,0,0,0,,that would require you to perform 10,000 different products.
Dialogue: 0,0:16:40.44,0:16:43.68,CHN,,0,0,0,,这意味着你得先做一万次乘法运算
Dialogue: 0,0:16:43.68,0:16:47.00,ENG,,0,0,0,,And then when you're collecting all the like terms along the diagonals,
Dialogue: 0,0:16:43.68,0:16:47.00,CHN,,0,0,0,,然后当沿着对角线合并同类项时
Dialogue: 0,0:16:47.00,0:16:50.12,ENG,,0,0,0,,that's another set of around 10,000 operations.
Dialogue: 0,0:16:47.00,0:16:50.12,CHN,,0,0,0,,你得再执行大约一万次操作
Dialogue: 0,0:16:50.64,0:16:54.64,ENG,,0,0,0,,More generally in the lingo, we'd say the algorithm is O(N²).
Dialogue: 0,0:16:50.64,0:16:54.64,CHN,,0,0,0,,更专业一点  我们可以说这是 O(N²) 的算法
Dialogue: 0,0:16:54.64,0:16:56.56,ENG,,0,0,0,,Meaning for two lists of size N,
Dialogue: 0,0:16:54.64,0:16:56.56,CHN,,0,0,0,,意思是说  两个含 N 个数的数组
Dialogue: 0,0:16:56.56,0:16:59.15,ENG,,0,0,0,,the way that the number of operations scales,
Dialogue: 0,0:16:56.56,0:16:59.15,CHN,,0,0,0,,需要执行操作的次数
Dialogue: 0,0:16:59.15,0:17:01.83,ENG,,0,0,0,,is in proportion to N².
Dialogue: 0,0:16:59.15,0:17:01.83,CHN,,0,0,0,,与 N² 成正比
Dialogue: 0,0:17:01.83,0:17:02.68,ENG,,0,0,0,,On the other hand,
Dialogue: 0,0:17:01.83,0:17:02.68,CHN,,0,0,0,,然而
Dialogue: 0,0:17:02.68,0:17:05.78,ENG,,0,0,0,,if I think of two polynomials in terms of their outputs,
Dialogue: 0,0:17:02.68,0:17:05.78,CHN,,0,0,0,,如果我只考虑多项式的函数输出值
Dialogue: 0,0:17:05.78,0:17:09.07,ENG,,0,0,0,,for example, sampling their values at some handful of inputs.
Dialogue: 0,0:17:05.78,0:17:09.07,CHN,,0,0,0,,比如只对少数几个输入值进行采样计算
Dialogue: 0,0:17:09.07,0:17:13.78,ENG,,0,0,0,,Then multiplying them only requires as many operations as the number of samples,
Dialogue: 0,0:17:09.07,0:17:13.78,CHN,,0,0,0,,那么乘法运算的执行次数就等于样本数量
Dialogue: 0,0:17:13.78,0:17:16.12,ENG,,0,0,0,,since again it's a pointwise operation.
Dialogue: 0,0:17:13.78,0:17:16.12,CHN,,0,0,0,,因为这也是一个逐点操作
Dialogue: 0,0:17:16.12,0:17:19.04,ENG,,0,0,0,,And with polynomials, you only need finitely mini samples
Dialogue: 0,0:17:16.12,0:17:19.04,CHN,,0,0,0,,并且说回多项式的情况
Dialogue: 0,0:17:19.04,0:17:21.10,ENG,,0,0,0,,to be able to recover the coefficients.
Dialogue: 0,0:17:19.04,0:17:21.10,CHN,,0,0,0,,只需有限的样本量就足以重现系数
Dialogue: 0,0:17:21.10,0:17:25.57,ENG,,0,0,0,,For example, two outputs are enough to uniquely specify a linear polynomial.
Dialogue: 0,0:17:21.10,0:17:25.57,CHN,,0,0,0,,比如  两个函数输出值就能确定一个唯一的线性多项式
Dialogue: 0,0:17:25.57,0:17:29.84,ENG,,0,0,0,,Three outputs would be enough to uniquely specify a quadratic polynomial
Dialogue: 0,0:17:25.57,0:17:29.84,CHN,,0,0,0,,三个函数输出值就能确定一个唯一的二次多项式
Dialogue: 0,0:17:29.84,0:17:32.84,ENG,,0,0,0,,and in general, if you know N distinct outputs,
Dialogue: 0,0:17:29.84,0:17:32.84,CHN,,0,0,0,,而且一般来说  如果你知道 N 个函数输出值
Dialogue: 0,0:17:32.84,0:17:37.38,ENG,,0,0,0,,that's enough to uniquely specify a polynomial that has N different coefficients.
Dialogue: 0,0:17:32.84,0:17:37.38,CHN,,0,0,0,,就足以确定一个唯一的 N-1 次多项式
Dialogue: 0,0:17:37.38,0:17:41.13,ENG,,0,0,0,,Or if you prefer, we could phrase this in the language of systems of equations.
Dialogue: 0,0:17:37.38,0:17:41.13,CHN,,0,0,0,,或者我们也可以用方程组的形式来表述
Dialogue: 0,0:17:41.13,0:17:43.46,ENG,,0,0,0,,Imagine I tell you, I have some polynomial
Dialogue: 0,0:17:41.13,0:17:43.46,CHN,,0,0,0,,假设我有一些多项式
Dialogue: 0,0:17:43.46,0:17:45.26,ENG,,0,0,0,,but I don't tell you what the coefficients are,
Dialogue: 0,0:17:43.46,0:17:45.26,CHN,,0,0,0,,但是我不告诉你它们的系数是什么
Dialogue: 0,0:17:45.26,0:17:46.75,ENG,,0,0,0,,those are a mystery to you.
Dialogue: 0,0:17:45.26,0:17:46.75,CHN,,0,0,0,,它们对你来说是未知的
Dialogue: 0,0:17:46.75,0:17:50.64,ENG,,0,0,0,,In our example, you might think of this as the product that we're trying to figure out.
Dialogue: 0,0:17:46.75,0:17:50.64,CHN,,0,0,0,,在我们的例子里  你可能会认为这其实就是我们要求出的乘积
Dialogue: 0,0:17:50.64,0:17:51.97,ENG,,0,0,0,,And then suppose I say,
Dialogue: 0,0:17:50.64,0:17:51.97,CHN,,0,0,0,,如果假设
Dialogue: 0,0:17:51.97,0:17:55.35,ENG,,0,0,0,,I'll just tell you what the outputs of this polynomial would be
Dialogue: 0,0:17:51.97,0:17:55.35,CHN,,0,0,0,,我只告诉你这个多项式的输出值
Dialogue: 0,0:17:55.35,0:17:59.74,ENG,,0,0,0,,if you inputted various different inputs like 0, 1, 2, 3 on and on.
Dialogue: 0,0:17:55.35,0:17:59.74,CHN,,0,0,0,,假如你指定了不同的输入值如 0 1 2 3 ... 等等
Dialogue: 0,0:17:59.74,0:18:04.10,ENG,,0,0,0,,And I give you enough so that you have as many equations as you have unknowns.
Dialogue: 0,0:17:59.74,0:18:04.10,CHN,,0,0,0,,并且我给你提供  与未知系数的个数相同数量的方程式
Dialogue: 0,0:18:04.10,0:18:07.76,ENG,,0,0,0,,It even happens to be a linear system of equations so that's nice.
Dialogue: 0,0:18:04.10,0:18:07.76,CHN,,0,0,0,,简直太棒了  它甚至恰好是一个线性方程组
Dialogue: 0,0:18:07.76,0:18:11.60,ENG,,0,0,0,,And in principle, at least, this should be enough to recover the coefficients.
Dialogue: 0,0:18:07.76,0:18:11.60,CHN,,0,0,0,,原则上  这已经足够用来恢复系数了
Dialogue: 0,0:18:11.60,0:18:13.42,ENG,,0,0,0,,So the rough algorithm outline then
Dialogue: 0,0:18:11.60,0:18:13.42,CHN,,0,0,0,,所以粗略的算法大纲为
Dialogue: 0,0:18:13.42,0:18:16.32,ENG,,0,0,0,,would be whenever you want to convolve two lists of numbers,
Dialogue: 0,0:18:13.42,0:18:16.32,CHN,,0,0,0,,当需要对两个数组进行卷积时
Dialogue: 0,0:18:16.32,0:18:19.40,ENG,,0,0,0,,you treat them like they're coefficients of two polynomials.
Dialogue: 0,0:18:16.32,0:18:19.40,CHN,,0,0,0,,可以把它们视为两个多项式的系数
Dialogue: 0,0:18:19.40,0:18:22.64,ENG,,0,0,0,,You sample those polynomials at enough outputs,
Dialogue: 0,0:18:19.40,0:18:22.64,CHN,,0,0,0,,对这些多项式的输出值尽可能多地采样
Dialogue: 0,0:18:22.64,0:18:24.64,ENG,,0,0,0,,multiply those samples pointwise,
Dialogue: 0,0:18:22.64,0:18:24.64,CHN,,0,0,0,,对这些样本逐点相乘
Dialogue: 0,0:18:25.32,0:18:28.15,ENG,,0,0,0,,and then solve the system to recover the coefficients
Dialogue: 0,0:18:25.32,0:18:28.15,CHN,,0,0,0,,然后求解并恢复出系数
Dialogue: 0,0:18:28.15,0:18:30.73,ENG,,0,0,0,,as a sneaky backdoor way to find the convolution.
Dialogue: 0,0:18:28.15,0:18:30.73,CHN,,0,0,0,,这就是为卷积找了个捷径
Dialogue: 0,0:18:31.33,0:18:33.65,ENG,,0,0,0,,And as I've stated it so far, at least,
Dialogue: 0,0:18:31.33,0:18:33.65,CHN,,0,0,0,,目前为止  正如我所说的那样
Dialogue: 0,0:18:33.65,0:18:37.74,ENG,,0,0,0,,some of you could rightfully complain, Grant, that is an idiotic plan.
Dialogue: 0,0:18:33.65,0:18:37.74,CHN,,0,0,0,,有些同学可能会抱怨说  Grant  这点子可太蠢了
Dialogue: 0,0:18:37.74,0:18:38.79,ENG,,0,0,0,,Because for one thing,
Dialogue: 0,0:18:37.74,0:18:38.79,CHN,,0,0,0,,因为一方面
Dialogue: 0,0:18:38.79,0:18:42.43,ENG,,0,0,0,,just calculating all these samples for one of the polynomials we know,
Dialogue: 0,0:18:38.79,0:18:42.43,CHN,,0,0,0,,只是计算其中一个已知多项式的所有样本
Dialogue: 0,0:18:42.43,0:18:45.43,ENG,,0,0,0,,already takes on the order of N² operations.
Dialogue: 0,0:18:42.43,0:18:45.43,CHN,,0,0,0,,算法的时间复杂度就已经到了 O(N²) 了
Dialogue: 0,0:18:45.43,0:18:48.12,ENG,,0,0,0,,Not to mention, solving that system is certainly going to be
Dialogue: 0,0:18:45.43,0:18:48.12,CHN,,0,0,0,,更别说要对整个系统进行计算了
Dialogue: 0,0:18:48.12,0:18:52.46,ENG,,0,0,0,,computationally as difficult as just doing the convolution in the first place.
Dialogue: 0,0:18:48.12,0:18:52.46,CHN,,0,0,0,,那和一开始就做卷积没有啥区别
Dialogue: 0,0:18:52.46,0:18:56.75,ENG,,0,0,0,,So like, sure, we have this connection between multiplication and convolutions
Dialogue: 0,0:18:52.46,0:18:56.75,CHN,,0,0,0,,是的  在函数相乘和做卷积之间存在着联系
Dialogue: 0,0:18:56.75,0:19:00.66,ENG,,0,0,0,,but all of the complexity happens in translating from one viewpoint to the other.
Dialogue: 0,0:18:56.75,0:19:00.66,CHN,,0,0,0,,但是所有的复杂性都发生在视角转化的过程中
Dialogue: 0,0:19:01.57,0:19:03.29,ENG,,0,0,0,,But there is a trick.
Dialogue: 0,0:19:01.57,0:19:03.29,CHN,,0,0,0,,当然  这里有一个技巧
Dialogue: 0,0:19:03.29,0:19:06.59,ENG,,0,0,0,,And those of you who know about fourier transforms and the FFT algorithm,
Dialogue: 0,0:19:03.29,0:19:06.59,CHN,,0,0,0,,有些同学如果了解傅里叶变换和 FFT 算法的话
Dialogue: 0,0:19:06.59,0:19:08.22,ENG,,0,0,0,,might see where this is going.
Dialogue: 0,0:19:06.59,0:19:08.22,CHN,,0,0,0,,可能已经看懂这是咋回事了
Dialogue: 0,0:19:08.22,0:19:09.72,ENG,,0,0,0,,If you're unfamiliar with these topics,
Dialogue: 0,0:19:08.22,0:19:09.72,CHN,,0,0,0,,但如果你对这些话题不熟悉的话
Dialogue: 0,0:19:09.72,0:19:12.45,ENG,,0,0,0,,what I'm about to say might seem completely out of the blue.
Dialogue: 0,0:19:09.72,0:19:12.45,CHN,,0,0,0,,接下来要讲的东西可能会让你有点摸不着头脑
Dialogue: 0,0:19:12.45,0:19:15.07,ENG,,0,0,0,,Just know that there are certain paths you could have walked in math
Dialogue: 0,0:19:12.45,0:19:15.07,CHN,,0,0,0,,现在你只需要知道  存在某种数学方法
Dialogue: 0,0:19:15.07,0:19:17.04,ENG,,0,0,0,,that make this more of an expected step.
Dialogue: 0,0:19:15.07,0:19:17.04,CHN,,0,0,0,,一旦了解了以后  很多事情就变得顺理成章了
Dialogue: 0,0:19:17.69,0:19:20.58,ENG,,0,0,0,,Basically the idea is that we have a freedom of choice here.
Dialogue: 0,0:19:17.69,0:19:20.58,CHN,,0,0,0,,基本思路就是这里我们有一些自由的选择
Dialogue: 0,0:19:20.58,0:19:25.58,ENG,,0,0,0,,If instead of evaluating as some arbitrary set of inputs like 0, 1, 2, 3 on and on,
Dialogue: 0,0:19:20.58,0:19:25.58,CHN,,0,0,0,,如果不像原来那样  输入任意数字集合如 0 1 2 3 等等来计算
Dialogue: 0,0:19:25.58,0:19:30.19,ENG,,0,0,0,,you choose to evaluate on a very specially selected set of complex numbers.
Dialogue: 0,0:19:25.58,0:19:30.19,CHN,,0,0,0,,而是替换为输入特定的复数来求解
Dialogue: 0,0:19:30.19,0:19:33.35,ENG,,0,0,0,,Specifically the ones that sit evenly spaced on the unit circle,
Dialogue: 0,0:19:30.19,0:19:33.35,CHN,,0,0,0,,尤其是在单位圆上均匀分布的那些
Dialogue: 0,0:19:33.35,0:19:35.29,ENG,,0,0,0,,what are known as the roots of unity.
Dialogue: 0,0:19:33.35,0:19:35.29,CHN,,0,0,0,,所谓的单位根的话
Dialogue: 0,0:19:35.29,0:19:37.15,ENG,,0,0,0,,This gives us a friendlier system.
Dialogue: 0,0:19:35.29,0:19:37.15,CHN,,0,0,0,,我们就得到了一个更友好的系统
Dialogue: 0,0:19:38.70,0:19:39.75,ENG,,0,0,0,,The basic idea is that
Dialogue: 0,0:19:38.70,0:19:39.75,CHN,,0,0,0,,基本思路就是
Dialogue: 0,0:19:39.75,0:19:44.30,ENG,,0,0,0,,by finding a number where taking its powers falls into this cycling pattern,
Dialogue: 0,0:19:39.75,0:19:44.30,CHN,,0,0,0,,找到一个取幂时输出总在单位圆上循环的数就行了
Dialogue: 0,0:19:44.30,0:19:45.77,ENG,,0,0,0,,it means that the system we generate
Dialogue: 0,0:19:44.30,0:19:45.77,CHN,,0,0,0,,于是  我们生成的系统
Dialogue: 0,0:19:45.77,0:19:49.92,ENG,,0,0,0,,is going to have a lot of redundancy in the different terms that you're calculating.
Dialogue: 0,0:19:45.77,0:19:49.92,CHN,,0,0,0,,在计算的不同项中会出现很多的冗余
Dialogue: 0,0:19:49.92,0:19:52.95,ENG,,0,0,0,,And by being clever about how you leverage that redundancy,
Dialogue: 0,0:19:49.92,0:19:52.95,CHN,,0,0,0,,巧妙地利用这些冗余
Dialogue: 0,0:19:52.95,0:19:54.50,ENG,,0,0,0,,you can save yourself a lot of work.
Dialogue: 0,0:19:52.95,0:19:54.50,CHN,,0,0,0,,可以帮我们省下很多功夫
Dialogue: 0,0:19:56.08,0:19:58.87,ENG,,0,0,0,,This set of outputs that I've written has a special name.
Dialogue: 0,0:19:56.08,0:19:58.87,CHN,,0,0,0,,这个输出集合有一个特定名字
Dialogue: 0,0:19:58.87,0:20:02.77,ENG,,0,0,0,,It's called the discrete fourier transform of the coefficients.
Dialogue: 0,0:19:58.87,0:20:02.77,CHN,,0,0,0,,叫作系数的离散傅里叶变换
Dialogue: 0,0:20:02.77,0:20:04.02,ENG,,0,0,0,,And if you want to learn more,
Dialogue: 0,0:20:02.77,0:20:04.02,CHN,,0,0,0,,如果你想了解更多
Dialogue: 0,0:20:04.02,0:20:07.34,ENG,,0,0,0,,I actually did another lecture for that same Julia MIT class,
Dialogue: 0,0:20:04.02,0:20:07.34,CHN,,0,0,0,,我还在同一门 Julia MIT 课程上过另一堂课
Dialogue: 0,0:20:07.34,0:20:09.49,ENG,,0,0,0,,all about discrete fourier transforms.
Dialogue: 0,0:20:07.34,0:20:09.49,CHN,,0,0,0,,都是关于离散傅里叶变换的
Dialogue: 0,0:20:09.49,0:20:12.41,ENG,,0,0,0,,And there's also a really excellent video on the channel Reducible,
Dialogue: 0,0:20:09.49,0:20:12.41,CHN,,0,0,0,,Reducible 频道也有一期很棒的视频
Dialogue: 0,0:20:12.41,0:20:14.79,ENG,,0,0,0,,talking about the fast fourier transform,
Dialogue: 0,0:20:12.41,0:20:14.79,CHN,,0,0,0,,介绍了快速傅里叶变换 (FFT)
Dialogue: 0,0:20:14.79,0:20:17.36,ENG,,0,0,0,,which is an algorithm for computing these more quickly.
Dialogue: 0,0:20:14.79,0:20:17.36,CHN,,0,0,0,,这种算法可以让以上这些计算变得更快
Dialogue: 0,0:20:17.36,0:20:20.40,ENG,,0,0,0,,Also Veritasium recently did a really good video on FFTs
Dialogue: 0,0:20:17.36,0:20:20.40,CHN,,0,0,0,,真理元素最近也做了一支关于 FFT 的优质视频
Dialogue: 0,0:20:20.40,0:20:22.28,ENG,,0,0,0,,so you've got lots of options.
Dialogue: 0,0:20:20.40,0:20:22.28,CHN,,0,0,0,,总有一期能满足你
Dialogue: 0,0:20:22.28,0:20:25.10,ENG,,0,0,0,,And that fast algorithm really is the point for us.
Dialogue: 0,0:20:22.28,0:20:25.10,CHN,,0,0,0,,而这种快速算法确实是我们的重点
Dialogue: 0,0:20:25.10,0:20:27.18,ENG,,0,0,0,,Again, because of all this redundancy,
Dialogue: 0,0:20:25.10,0:20:27.18,CHN,,0,0,0,,再强调一下  多亏了这些冗余
Dialogue: 0,0:20:27.18,0:20:30.91,ENG,,0,0,0,,there exist a method to go from the coefficients to all of these outputs
Dialogue: 0,0:20:27.18,0:20:30.91,CHN,,0,0,0,,我们才能更快速地把系数  转换到这些输出点
Dialogue: 0,0:20:30.91,0:20:34.05,ENG,,0,0,0,,where instead of doing on the order of N² operations,
Dialogue: 0,0:20:30.91,0:20:34.05,CHN,,0,0,0,,原来需要复杂度为 O(N²) 的操作
Dialogue: 0,0:20:34.05,0:20:36.89,ENG,,0,0,0,,you do on the order of N times the log(N) operations
Dialogue: 0,0:20:34.05,0:20:36.89,CHN,,0,0,0,,现在只需 O(N log N)
Dialogue: 0,0:20:36.89,0:20:39.57,ENG,,0,0,0,,which is much much better as you scale to big lists.
Dialogue: 0,0:20:36.89,0:20:39.57,CHN,,0,0,0,,输入数组越大  这个方法的优势就越明显
Dialogue: 0,0:20:39.57,0:20:42.74,ENG,,0,0,0,,And importantly, this FFT algorithm goes both ways.
Dialogue: 0,0:20:39.57,0:20:42.74,CHN,,0,0,0,,更重要的是  FFT 还可以反过来用
Dialogue: 0,0:20:42.74,0:20:46.15,ENG,,0,0,0,,It also lets you go from the outputs to the coefficients.
Dialogue: 0,0:20:42.74,0:20:46.15,CHN,,0,0,0,,你也可以从输出对应到系数
Dialogue: 0,0:20:46.15,0:20:49.42,ENG,,0,0,0,,Though bringing it all together, let's look back at our algorithm outline.
Dialogue: 0,0:20:46.15,0:20:49.42,CHN,,0,0,0,,有了以上的知识  我们来回顾一下我们的算法大纲
Dialogue: 0,0:20:49.42,0:20:52.56,ENG,,0,0,0,,Now, we can say, whenever you're given two long lists of numbers
Dialogue: 0,0:20:49.42,0:20:52.56,CHN,,0,0,0,,只要我们有两个长数组
Dialogue: 0,0:20:52.56,0:20:54.50,ENG,,0,0,0,,and you want to take their convolution,
Dialogue: 0,0:20:52.56,0:20:54.50,CHN,,0,0,0,,想要计算它们的卷积的话
Dialogue: 0,0:20:54.50,0:20:58.28,ENG,,0,0,0,,first, compute the fast fourier transform of each one of them,
Dialogue: 0,0:20:54.50,0:20:58.28,CHN,,0,0,0,,首先分别计算它们的快速傅里叶变换
Dialogue: 0,0:20:58.28,0:21:01.50,ENG,,0,0,0,,which in the back of your mind, you can just think of as treating them like
Dialogue: 0,0:20:58.28,0:21:01.50,CHN,,0,0,0,,在你的脑海中  你可以把这些数看作是
Dialogue: 0,0:21:01.50,0:21:03.41,ENG,,0,0,0,,they're the coefficients of a polynomial
Dialogue: 0,0:21:01.50,0:21:03.41,CHN,,0,0,0,,多项式的系数
Dialogue: 0,0:21:03.41,0:21:06.99,ENG,,0,0,0,,and evaluating it at a very specially selected set of points.
Dialogue: 0,0:21:03.41,0:21:06.99,CHN,,0,0,0,,再将他们作为一系列具有特殊性质的点来处理
Dialogue: 0,0:21:06.99,0:21:10.48,ENG,,0,0,0,,Then, multiply together the two results that you just got, point wise,
Dialogue: 0,0:21:06.99,0:21:10.48,CHN,,0,0,0,,然后将两个结果逐点相乘
Dialogue: 0,0:21:10.48,0:21:11.78,ENG,,0,0,0,,which is nice and fast.
Dialogue: 0,0:21:10.48,0:21:11.78,CHN,,0,0,0,,这还挺容易的
Dialogue: 0,0:21:11.78,0:21:14.63,ENG,,0,0,0,,And then do an inverse fast fourier transform
Dialogue: 0,0:21:11.78,0:21:14.63,CHN,,0,0,0,,然后做一个快速傅里叶逆变换
Dialogue: 0,0:21:14.63,0:21:16.78,ENG,,0,0,0,,and what that gives you is the sneaky back door way
Dialogue: 0,0:21:14.63,0:21:16.78,ENG,,0,0,0,, 
Dialogue: 0,0:21:16.78,0:21:19.18,ENG,,0,0,0,,to compute the convolution that we were looking for.
Dialogue: 0,0:21:14.63,0:21:19.18,CHN,,0,0,0,,我们就得到了一个计算卷积的取巧方法
Dialogue: 0,0:21:19.18,0:21:23.07,ENG,,0,0,0,,But this time, it only involves O(N log N) operations.
Dialogue: 0,0:21:19.18,0:21:23.07,CHN,,0,0,0,,但是这回  它的复杂度仅为 O(N log N)
Dialogue: 0,0:21:23.07,0:21:25.04,ENG,,0,0,0,,That's really cool to me.
Dialogue: 0,0:21:23.07,0:21:25.04,CHN,,0,0,0,,太神奇了
Dialogue: 0,0:21:25.04,0:21:29.83,ENG,,0,0,0,,This very specific context where convolutions show up, multiplying two polynomials,
Dialogue: 0,0:21:25.04,0:21:29.83,CHN,,0,0,0,,尽管用到卷积的情景仅仅是多项式相乘
Dialogue: 0,0:21:29.83,0:21:31.25,ENG,,0,0,0,,opens the doors for an algorithm
Dialogue: 0,0:21:29.83,0:21:31.25,CHN,,0,0,0,,但它引出了 FFT
Dialogue: 0,0:21:31.25,0:21:34.11,ENG,,0,0,0,,that's relevant everywhere else where convolutions might come up.
Dialogue: 0,0:21:31.25,0:21:34.11,CHN,,0,0,0,,任何使用卷积的地方  都能看到 FFT 的身影
Dialogue: 0,0:21:34.11,0:21:36.52,ENG,,0,0,0,,If you want to add probability distributions
Dialogue: 0,0:21:34.11,0:21:36.52,CHN,,0,0,0,,比如  在一些大型图像处理中
Dialogue: 0,0:21:36.52,0:21:39.18,ENG,,0,0,0,,to some large image processing, whatever it might be.
Dialogue: 0,0:21:36.52,0:21:39.18,CHN,,0,0,0,,添加一些概率分布之类的东西
Dialogue: 0,0:21:39.18,0:21:42.35,ENG,,0,0,0,,And I just think that's such a good example of why you should be excited
Dialogue: 0,0:21:39.18,0:21:42.35,CHN,,0,0,0,,这有力地证明了  一个值得我们兴奋的情形在于
Dialogue: 0,0:21:42.35,0:21:45.07,ENG,,0,0,0,,when you see some operation or concept in math
Dialogue: 0,0:21:42.35,0:21:45.07,ENG,,0,0,0,, 
Dialogue: 0,0:21:45.07,0:21:47.67,ENG,,0,0,0,,show up in a lot of seemingly unrelated areas.
Dialogue: 0,0:21:42.35,0:21:47.67,CHN,,0,0,0,,看似无关的几个领域  出现了相同的数学运算或概念
Dialogue: 0,0:21:48.84,0:21:51.61,ENG,,0,0,0,,If you want a little homework, here's something that's fun to think about.
Dialogue: 0,0:21:48.84,0:21:51.61,CHN,,0,0,0,,想要课后练习的话  我留一道思考题
Dialogue: 0,0:21:51.61,0:21:54.49,ENG,,0,0,0,,Explain why when you multiply two different numbers,
Dialogue: 0,0:21:51.61,0:21:54.49,CHN,,0,0,0,,请解释：当你将两个不同的数字相乘时
Dialogue: 0,0:21:54.49,0:21:58.10,ENG,,0,0,0,,just ordinary multiplication the way we all learn in elementary school,
Dialogue: 0,0:21:54.49,0:21:58.10,CHN,,0,0,0,,就是我们在小学都学过的普通乘法那种
Dialogue: 0,0:21:58.10,0:22:02.45,ENG,,0,0,0,,what you're doing is basically a convolution between the digits of those numbers.
Dialogue: 0,0:21:58.10,0:22:02.45,CHN,,0,0,0,,为什么你所做的事  大体相当于求“两数各个数位”的卷积
Dialogue: 0,0:22:02.45,0:22:04.76,ENG,,0,0,0,,There's some added steps with carries and the like
Dialogue: 0,0:22:02.45,0:22:04.76,CHN,,0,0,0,,会用到进位之类的额外步骤
Dialogue: 0,0:22:04.76,0:22:06.70,ENG,,0,0,0,,but the core step is a convolution.
Dialogue: 0,0:22:04.76,0:22:06.70,CHN,,0,0,0,,不过核心步骤还是卷积
Dialogue: 0,0:22:07.32,0:22:09.91,ENG,,0,0,0,,In light of the existence of a fast algorithm,
Dialogue: 0,0:22:07.32,0:22:09.91,CHN,,0,0,0,,而由于这个快速算法的存在
Dialogue: 0,0:22:09.91,0:22:13.15,ENG,,0,0,0,,what that means is if you have two very large integers,
Dialogue: 0,0:22:09.91,0:22:13.15,CHN,,0,0,0,,这就意味着如果你要乘两个非常大的整数
Dialogue: 0,0:22:13.15,0:22:15.22,ENG,,0,0,0,,then there exist a way to find their product
Dialogue: 0,0:22:13.15,0:22:15.22,CHN,,0,0,0,,那么就有这么一种找到它们乘积的办法
Dialogue: 0,0:22:15.22,0:22:18.07,ENG,,0,0,0,,that's faster than the method we learn in elementary school.
Dialogue: 0,0:22:15.22,0:22:18.07,CHN,,0,0,0,,要比我们在小学时学的方法要快得多
Dialogue: 0,0:22:18.07,0:22:22.70,ENG,,0,0,0,,That instead of requiring O(N²) operations, only requires O(N log N),
Dialogue: 0,0:22:18.07,0:22:22.70,CHN,,0,0,0,,复杂度从 O(N²) 一下降到了 O(N log N)
Dialogue: 0,0:22:22.70,0:22:25.39,ENG,,0,0,0,,which doesn't even feel like it should be possible.
Dialogue: 0,0:22:22.70,0:22:25.39,CHN,,0,0,0,,有一种这本来没理由做得到的感觉
Dialogue: 0,0:22:25.39,0:22:28.55,ENG,,0,0,0,,The catch is that before this is actually useful in practice,
Dialogue: 0,0:22:25.39,0:22:28.55,CHN,,0,0,0,,要注意的是  要让这件事变得值得
Dialogue: 0,0:22:28.55,0:22:31.41,ENG,,0,0,0,,your numbers would have to be absolutely monstrous.
Dialogue: 0,0:22:28.55,0:22:31.41,CHN,,0,0,0,,你的两个乘数必须大得可怕
Dialogue: 0,0:22:31.41,0:22:34.00,ENG,,0,0,0,,But still it's cool that such an algorithm exists.
Dialogue: 0,0:22:31.41,0:22:34.00,CHN,,0,0,0,,不管怎样这种算法存在的本身就非常美妙
Dialogue: 0,0:22:35.18,0:22:37.85,ENG,,0,0,0,,And next up, will turn our attention to the continuous case
Dialogue: 0,0:22:35.18,0:22:37.85,CHN,,0,0,0,,下一期  我们要把目光转向连续卷积
Dialogue: 0,0:22:37.85,0:22:40.64,ENG,,0,0,0,,with the special focus on probability distributions.
Dialogue: 0,0:22:37.85,0:22:40.64,CHN,,0,0,0,,并且会特别讨论概率分布的情况
Dialogue: 0,0:22:42.00,0:22:57.00,CHN,,0,0,0,,{\an7\pos(300,150)\fs54\fn霞鹜文楷 GB\fad(00,500)}3Blue1Brown 中文字幕组持续招募数学、物理、计算机领域的优秀译者\N欢迎有能力且有时间的译者  洽询字幕组（向 3B1B 的 B 站官号私信即可）
